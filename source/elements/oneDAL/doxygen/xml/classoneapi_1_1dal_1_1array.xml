<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classoneapi_1_1dal_1_1array" kind="class" language="C++" prot="public">
    <compoundname>oneapi::dal::array</compoundname>
    <includes refid="array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Data</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1array_1a547d2696ec69facdab7a86ae682d0f84" prot="public" static="no">
        <type>Data</type>
        <definition>using data_t =  Data</definition>
        <argsstring></argsstring>
        <name>data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="9" column="5" bodyfile="include/oneapi/dal/array.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a422b3a90148a555deca02b6edc300328" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>static array&lt;Data&gt; empty</definition>
        <argsstring>(const sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>empty</name>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates a new array instance by passing a pointer to the memory block. The array shall own the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="20" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a985b1e485ad65c42b5a523739bb01c54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>static array&lt;Data&gt; full</definition>
        <argsstring>(sycl::queue &amp;queue, std::int64_t count, Element &amp;&amp;element, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>full</name>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Element &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, fills it with a scalar value, creates a new array instance by passing a pointer to the memory block. The array shall own the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Element</parametername>
</parameternamelist>
<parameterdescription>
<para>The type from which array elements of type $Data$ can be constructed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that is used to fill a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>Elements of type <computeroutput>Data</computeroutput> are constructible from the <computeroutput>Element</computeroutput> type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="37" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a2c55cdee514c066230f5689ce7aa75b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>static array&lt;Data&gt; zeros</definition>
        <argsstring>(sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>zeros</name>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block on mutable data, fills it with zeros, creates a new array instance by passing a pointer to the memory block. The array shall own the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="50" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1aa08dc9df37f54cf90cc55e47228f458e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>static array&lt;Data&gt; wrap</definition>
        <argsstring>(Data *data, std::int64_t count, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>wrap</name>
        <param>
          <type>Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance by passing the pointer to externally-allocated memory block for mutable data. It is the responsibility of the calling application to free the memory block as the array shall not free it when the reference count is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the $data$ for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>data != nullptr</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="63" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1afad9adefb34a73c5fc5b2fb18e0fc533" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>static array&lt;Data&gt; wrap</definition>
        <argsstring>(const Data *data, std::int64_t count, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>wrap</name>
        <param>
          <type>const Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance by passing the pointer to externally-allocated memory block for immutable data. It is the responsibility of the calling application to free the memory block as the array shall not free it when the reference count is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the $data$ for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>data != nullptr</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="76" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a9cbcfcbf0173e1edaf4094bb36b34b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>()</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new instance of the class without memory allocation: :expr:<computeroutput>mutable_data</computeroutput> and :expr:<computeroutput>data</computeroutput> pointers shall be set to <computeroutput>nullptr</computeroutput>, :expr:<computeroutput>count</computeroutput> shall be to zero; the pointer to the ownership structure shall be set to <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1aafe7dd9fdb1baa4058048d25cdec9b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const array&lt; Data &gt; &amp;other)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a new array instance that shares an ownership with $other$ on its memory block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="87" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1abfde33736177e2595562efec2e9eed5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(array&lt; Data &gt; &amp;&amp;other)</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves :expr:<computeroutput>data</computeroutput>, :expr:<computeroutput>mutable_data</computeroutput> pointers, :expr:<computeroutput>count</computeroutput>, and pointer to the ownership structure in $other$ to the new array instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="91" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1aa618a10ee51094f972ed7417c1f47e47" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, Data *data, std::int64_t count, Deleter &amp;&amp;deleter, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated mutable data. The ownership structure shall be created for a block, the input $deleter$ shall be assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the $data$. The deleter shall provide <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free $data$. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when $data$ becomes ready to be read or written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="106" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a47b093f28368cee71449728fd9891c06" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, const Data *data, std::int64_t count, ConstDeleter &amp;&amp;deleter, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated immutable data. The ownership structure shall be created for a block, the input $deleter$ shall be assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the $data$. The deleter shall implement <computeroutput>void operator()(const Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the $data$. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free $data$. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the $data$ for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="125" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a613c71b94c0de1f67e4de9401ae495c5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefData</type>
          </param>
          <param>
            <type>typename ExtData</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const array&lt; RefData &gt; &amp;ref, ExtData *data, std::int64_t count)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; RefData &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>ExtData *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An aliasing constructor: creates a new array instance that stores $data$ pointer, assigns the pointer to the ownership structure of $ref$ to the new instance. Array shall return $data$ pointer as its mutable or immutable block depending on the $ExtData$ type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RefData</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExtData</parametername>
</parameternamelist>
<parameterdescription>
<para>Either $Data$ or $const Data$ type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which shares ownership structure with created one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable or immutable unmanaged pointer hold by created array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the $data$.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>std::is_same_v&lt;ExtData, const Data&gt; || std::is_same_v&lt;ExtData, Data&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="147" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ae2a62054fa693a5708e32625f6f6375d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>array&lt;Data&gt; operator=</definition>
        <argsstring>(const array&lt; Data &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the :expr:<computeroutput>data</computeroutput>, :expr:<computeroutput>mutable_data</computeroutput> pointers, :expr:<computeroutput>count</computeroutput>, and pointer to the ownership structure in the array instance by the values in $other$.</para>
<para><simplesect kind="post"><para>:expr:<computeroutput>data == other.data</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para>:expr:<computeroutput>mutable_data == other.mutable_data</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para>:expr:<computeroutput>count == other.count</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="155" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a39e9ff86c5d039e02c44dc8ffa8f2bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt;</type>
        <definition>array&lt;Data&gt; operator=</definition>
        <argsstring>(array&lt; Data &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; Data &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swaps the values of :expr:<computeroutput>data</computeroutput>, :expr:<computeroutput>mutable_data</computeroutput> pointers, :expr:<computeroutput>count</computeroutput>, and pointer to the ownership structure in the array instance and $other$. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="159" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ae4b660a59411e4e3e3c46ae4d70e1943" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Data *</type>
        <definition>Data* get_mutable_data</definition>
        <argsstring>() const</argsstring>
        <name>get_mutable_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the memory block holding mutable data. <simplesect kind="pre"><para>:expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput>, othewise throws <computeroutput>domain_error</computeroutput> </para>
</simplesect>
<simplesect kind="invariant"><para>:expr:<computeroutput>mutable_data != nullptr</computeroutput> if :expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> &amp;&amp; count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ad6839735432602607a1403baf91b6a03" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const Data *</type>
        <definition>const Data* get_data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the memory block holding immutable data. <simplesect kind="invariant"><para>:expr:<computeroutput>data != nullptr</computeroutput> if :expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
<simplesect kind="invariant"><para>if :expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput> then :expr:<computeroutput>data == mutable_data</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="169" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool has_mutable_data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_mutable_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether array contains :expr:<computeroutput>mutable_data</computeroutput> or not</para>
<para><simplesect kind="invariant"><para>:expr:<computeroutput>mutable_data != nullptr</computeroutput> if this returns <computeroutput>true</computeroutput> and :expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a9c0ff14ba5172db332021f762e464fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref> &amp;</type>
        <definition>array&amp; need_mutable_data</definition>
        <argsstring>(sycl::queue &amp;queue, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>need_mutable_data</name>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns mutable_data, if array contains it. Otherwise, allocates a memory block for mutable data and fills it with the data stored at :expr:<computeroutput>data</computeroutput>. Creates the ownership structure for allocated memory block and stores the pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>:expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="185" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a3f1207c28eca55d0d45ba1a131eacacd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_count</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_count</name>
        <briefdescription>
<para>The number of elements of type $Data$ in a memory block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="189" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a166b39e55d0cd37657028e5dda117158" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of memory block in bytes <simplesect kind="invariant"><para>:expr:<computeroutput>size == count * sizeof(Data)</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="193" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets ownership structure pointer to <computeroutput>nullptr</computeroutput>, sets :expr:<computeroutput>count</computeroutput> to zero, :expr:<computeroutput>data</computeroutput> and :expr:<computeroutput>mutable_data</computeroutput> to :expr:<computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="197" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ac607b8725723eb1714df52f315886d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>reset</name>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates ownership structure for this block, assigns the structure inside the array. The array shall own allocated memory block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="206" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1ae85d5ee4341aaf8296010bb4e6135305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(Data *data, std::int64_t count, Deleter &amp;&amp;deleter, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>reset</name>
        <param>
          <type>Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated mutable data, assigns input $deleter$ object to it, sets :expr:<computeroutput>data</computeroutput> and :expr:<computeroutput>mutable_data</computeroutput> pointers to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the $data$. The deleter shall implement <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free $data$. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the $data$ for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="222" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a112c8af9f4fc0a14b518813183cba19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const Data *data, std::int64_t count, ConstDeleter &amp;&amp;deleter, const sycl::vector_class&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>reset</name>
        <param>
          <type>const Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const sycl::vector_class&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated immutable data, assigns input $deleter$ object to it, sets :expr:<computeroutput>data</computeroutput> pointer to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free. The deleter shall implement <computeroutput>void operator()(const Data*)</computeroutput>` member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The immutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free $data$. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the $data$ for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="239" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a9df3c848ec90e2e9bc0208071b734ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefData</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const array&lt; RefData &gt; &amp;ref, Data *data, std::int64_t count)</argsstring>
        <name>reset</name>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; RefData &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes :expr:<computeroutput>data</computeroutput> and :expr:<computeroutput>mutable_data</computeroutput> with data pointer, :expr:<computeroutput>count</computeroutput> with input $count$ value, initializes the pointer to ownership structure with the one from ref. Array shall return $data$ pointer as its mutable block. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RefData</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which is used to share ownership structure with current one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable unmanaged pointer to be assigned to the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the $data$. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a6f71a66f10bee6e352250a6a23082f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefData</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const array&lt; RefData &gt; &amp;ref, const Data *data, std::int64_t count)</argsstring>
        <name>reset</name>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1array" kindref="compound">array</ref>&lt; RefData &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const Data *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes :expr:<computeroutput>data</computeroutput> with data pointer, :expr:<computeroutput>count</computeroutput> with input $count$ value, initializes the pointer to ownership structure with the one from ref. Array shall return $data$ pointer as its immutable block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RefData</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which is used to share ownership structure with current one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Immutable unmanaged pointer to be assigned to the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type $Data$ in the $data$. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="268" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1array_1a6a620f6c2a9060e6d47ea2604acc3d86" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const Data &amp;</type>
        <definition>const Data&amp; operator[]</definition>
        <argsstring>(std::int64_t index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides a read-only access to the elements of array. Shall not perform boundary checks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/dal/array.hpp" line="272" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>$Data$ cannot be const-qualified. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/oneapi/dal/array.hpp" line="7" column="12" bodyfile="include/oneapi/dal/array.hpp" bodystart="7" bodyend="273"/>
    <listofallmembers>
      <member refid="classoneapi_1_1dal_1_1array_1a9cbcfcbf0173e1edaf4094bb36b34b31" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1aafe7dd9fdb1baa4058048d25cdec9b52" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1abfde33736177e2595562efec2e9eed5a" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1aa618a10ee51094f972ed7417c1f47e47" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a47b093f28368cee71449728fd9891c06" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a613c71b94c0de1f67e4de9401ae495c5" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a547d2696ec69facdab7a86ae682d0f84" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>data_t</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a422b3a90148a555deca02b6edc300328" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>empty</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a985b1e485ad65c42b5a523739bb01c54" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>full</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a3f1207c28eca55d0d45ba1a131eacacd" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>get_count</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ad6839735432602607a1403baf91b6a03" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>get_data</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ae4b660a59411e4e3e3c46ae4d70e1943" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>get_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a166b39e55d0cd37657028e5dda117158" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>get_size</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>has_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a9c0ff14ba5172db332021f762e464fba" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>need_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ae2a62054fa693a5708e32625f6f6375d" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a39e9ff86c5d039e02c44dc8ffa8f2bfc" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a6a620f6c2a9060e6d47ea2604acc3d86" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>operator[]</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ac607b8725723eb1714df52f315886d47" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1ae85d5ee4341aaf8296010bb4e6135305" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a112c8af9f4fc0a14b518813183cba19b" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a9df3c848ec90e2e9bc0208071b734ed1" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a6f71a66f10bee6e352250a6a23082f2b" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1aa08dc9df37f54cf90cc55e47228f458e" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1afad9adefb34a73c5fc5b2fb18e0fc533" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1array_1a2c55cdee514c066230f5689ce7aa75b6" prot="public" virt="non-virtual"><scope>oneapi::dal::array</scope><name>zeros</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
