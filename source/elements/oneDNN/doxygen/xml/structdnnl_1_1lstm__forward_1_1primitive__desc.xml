<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdnnl_1_1lstm__forward_1_1primitive__desc" kind="struct" language="C++" prot="public">
    <compoundname>dnnl::lstm_forward::primitive_desc</compoundname>
    <basecompoundref refid="structdnnl_1_1rnn__primitive__desc__base" prot="public" virt="non-virtual">dnnl::rnn_primitive_desc_base</basecompoundref>
    <includes refid="dnnl_8hpp" local="no">dnnl.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a1398d856d14686bff741cf0ae30fbb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_forward::primitive_desc::primitive_desc</definition>
        <argsstring>()</argsstring>
        <name>primitive_desc</name>
        <briefdescription>
<para>Default constructor. Produces an empty object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5323" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a04e0f28e526758a4795e5095af1f905a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_forward::primitive_desc::primitive_desc</definition>
        <argsstring>(const desc &amp;desc, const engine &amp;engine, bool allow_empty=false)</argsstring>
        <name>primitive_desc</name>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__forward_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_empty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a primitive descriptor for an LSTM forward propagation primitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for an LSTM forward propagation primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_empty</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag signifying whether construction is allowed to fail without throwing an exception. In this case an empty object will be produced. This flag is optional and defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5334" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1ae7c43c660b438ab1105ead4f46340b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_forward::primitive_desc::primitive_desc</definition>
        <argsstring>(const desc &amp;desc, const primitive_attr &amp;attr, const engine &amp;engine, bool allow_empty=false)</argsstring>
        <name>primitive_desc</name>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__forward_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1primitive__attr" kindref="compound">primitive_attr</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_empty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a primitive descriptor for an LSTM forward propagation primitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for an LSTM forward propagation primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive attributes to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_empty</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag signifying whether construction is allowed to fail without throwing an exception. In this case an empty object will be produced. This flag is optional and defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5347" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1afd262a03436e463c97bb5dbe4b54a89d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::src_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source layer memory descriptor. <simplesect kind="return"><para>Source layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5351" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1af48ac5235429822d462bb96437f2ecdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::src_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5354" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1ac863a772baf671e7fc776a2312f58416" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::src_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5357" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a832e7468c8062760a262a82fdf7b8976" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::weights_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>weights_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns weights layer memory descriptor. <simplesect kind="return"><para>Weights layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5360" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a3b3aa227de71f38560588b535b19cee7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::weights_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>weights_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns weights iteration memory descriptor. <simplesect kind="return"><para>Weights iteration memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5363" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1af9c2058bcb514ff8ac065e5c631450de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::bias_desc</definition>
        <argsstring>() const</argsstring>
        <name>bias_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns bias memory descriptor. <simplesect kind="return"><para>Bias memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a bias parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5366" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a47da32a15db013f1d5859a55522aa2f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::dst_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns destination layer memory descriptor. <simplesect kind="return"><para>Destination layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5369" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a080c46ade77a802333e1fd4bbce56e69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::dst_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns destination iteration memory descriptor. <simplesect kind="return"><para>Destination iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a destination iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5372" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a790534f833ee4215df25bfd5f17cec22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::dst_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5375" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__forward_1_1primitive__desc_1a56222845e809457d73180adf8494959a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_forward::primitive_desc::workspace_desc</definition>
        <argsstring>() const</argsstring>
        <name>workspace_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the workspace memory descriptor. <simplesect kind="return"><para>Workspace memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not require workspace parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5378" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Primitive descriptor for an LSTM forward propagation primitive. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dnnl::rnn_primitive_desc_base</label>
        <link refid="structdnnl_1_1rnn__primitive__desc__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dnnl::primitive_desc_base</label>
        <link refid="structdnnl_1_1primitive__desc__base"/>
      </node>
      <node id="3">
        <label>dnnl::primitive_desc</label>
        <link refid="structdnnl_1_1primitive__desc"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dnnl::lstm_forward::primitive_desc</label>
        <link refid="structdnnl_1_1lstm__forward_1_1primitive__desc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dnnl::rnn_primitive_desc_base</label>
        <link refid="structdnnl_1_1rnn__primitive__desc__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dnnl::primitive_desc_base</label>
        <link refid="structdnnl_1_1primitive__desc__base"/>
      </node>
      <node id="3">
        <label>dnnl::primitive_desc</label>
        <link refid="structdnnl_1_1primitive__desc"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dnnl::lstm_forward::primitive_desc</label>
        <link refid="structdnnl_1_1lstm__forward_1_1primitive__desc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dnnl.hpp" line="5321" column="56" bodyfile="include/dnnl.hpp" bodystart="5321" bodyend="5379"/>
    <listofallmembers>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1af9c2058bcb514ff8ac065e5c631450de" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>bias_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1aa81c0dbda6447fe83d1d37122fdc708c" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_bias_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a60f17d04c493c42e4a50ad5feff5c8ca" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_dst_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a6b9fb7da987329256c04db6ecbb9dc36" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_dst_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a33e735717f2dffa22cc28e90e20bd344" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_dst_iter_c_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a4a5eceabe7b1ffd9f181376192f5d397" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_dst_iter_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1aeb8d331bd2bcb80bd06ec729175e4314" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_dst_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a733e6ff4e78a758e69ae6232e8955871" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_src_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ab4268c6bb70dd6c22de43141cc301b77" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_src_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a6f3d6865c312c3231ff7dec8df561ecb" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_src_iter_c_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a248bcc0f5bec8d76eda24ad391693fa2" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_src_iter_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1afbf93e3cf53b5ef7d04a0b2fcb41f77b" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_src_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a192f7b334efac9a5ac20344a76d4d552" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_weights_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af51378982968e2b4f7abb6a32acfb0af" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_weights_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a4243bb55a8d07fa66a3c44633996e73b" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_weights_iter_desc</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a1df1f7cb00c68c73bc4320d7b5fda7bb" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>diff_weights_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a495ee7c8e1ec3eab35f6329fdcd352bb" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>dst_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1addbec977643a7900f4156f7aab3fb4db" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>dst_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a790534f833ee4215df25bfd5f17cec22" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>dst_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a080c46ade77a802333e1fd4bbce56e69" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>dst_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a47da32a15db013f1d5859a55522aa2f5" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>dst_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a32f7477c79e715a341bb9127df521fbc" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>get_engine</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a0ef600ea3666f0fd93c9c5d112aaf05c" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>get_primitive_attr</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ae680492d4e4b16a938cfc051e5c906be" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>impl_info_str</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a1398d856d14686bff741cf0ae30fbb9e" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a04e0f28e526758a4795e5095af1f905a" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1ae7c43c660b438ab1105ead4f46340b39" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1abaec6897940cf14b0b3113a593ec5dbf" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>primitive_desc_base</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a35d24b553ba6aa807516e9470fdd7d16" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>query_md</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1acbedc4257eaa26f868356f9f594a856a" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>query_s64</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a8ecd7977ed8cf79c9e131139a034c2e1" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>rnn_primitive_desc_base</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a6238358ec03afd57fb20dffa65b48d2f" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>scratchpad_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ad4079e0891373bd2dc841f3f94cf47ed" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>scratchpad_engine</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af42e791f493e636c086e13c6d4c06b43" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>src_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af48dcff294cadb2916fd784b8474d221" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>src_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1ac863a772baf671e7fc776a2312f58416" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>src_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1af48ac5235429822d462bb96437f2ecdc" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>src_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1afd262a03436e463c97bb5dbe4b54a89d" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>src_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1acb13d08987cca8d8f05ec4858fa61fb4" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>weights_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a93f0904566b399874c47b3b1ad3d1495" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>weights_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a3b3aa227de71f38560588b535b19cee7" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>weights_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a832e7468c8062760a262a82fdf7b8976" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>weights_layer_desc</name></member>
      <member refid="structdnnl_1_1lstm__forward_1_1primitive__desc_1a56222845e809457d73180adf8494959a" prot="public" virt="non-virtual"><scope>dnnl::lstm_forward::primitive_desc</scope><name>workspace_desc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
