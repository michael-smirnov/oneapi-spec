<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdnnl_1_1stream" kind="struct" language="C++" prot="public">
    <compoundname>dnnl::stream</compoundname>
    <includes refid="dnnl_8hpp" local="no">dnnl.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>flags</name>
        <enumvalue id="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59aeedb23e15d8dfa33877588b9bcf9df8c" prot="public">
          <name>default_order</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default order execution. Either in-order or out-of-order depending on the engine runtime. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59af51b25ca6f591d130cd0b575bf7821b3" prot="public">
          <name>in_order</name>
          <briefdescription>
<para>In-order execution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59a6f68b64d0cb895344cb033c850457f0b" prot="public">
          <name>out_of_order</name>
          <briefdescription>
<para>Out-of-order execution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59aeffb2d149f637ca450767d77cd927108" prot="public">
          <name>default_flags</name>
          <briefdescription>
<para>Default stream configuration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Stream flags. Can be combined using the bitwise OR operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1009" column="21" bodyfile="include/dnnl.hpp" bodystart="1009" bodyend="1019"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdnnl_1_1stream_1a4d5c6a4b863e4086d6522e2317ca00a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::stream::stream</definition>
        <argsstring>()</argsstring>
        <name>stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty stream. An empty stream cannot be used in any operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1023" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1stream_1a681be26446cb86ddcc727f3a00a69cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::stream::stream</definition>
        <argsstring>(const engine &amp;engine, flags flags=flags::default_flags)</argsstring>
        <name>stream</name>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59" kindref="member">flags</ref></type>
          <declname>flags</declname>
          <defval><ref refid="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59aeffb2d149f637ca450767d77cd927108" kindref="member">flags::default_flags</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream for the specified engine and with behavior controlled by the specified flags.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to create the stream on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags controlling stream behavior. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1030" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1stream_1a007cd67c0fcb5e80d4fc67a4b7f9624b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::stream::stream</definition>
        <argsstring>(const engine &amp;engine, cl::sycl::queue &amp;queue)</argsstring>
        <name>stream</name>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>cl::sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream for the specified engine and the SYCL queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine object to use for the stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>SYCL queue to use for the stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1036" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1stream_1a53d7cf6f9281b670e8f2bd899b408110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>cl::sycl::queue</type>
        <definition>cl::sycl::queue dnnl::stream::get_sycl_queue</definition>
        <argsstring>() const</argsstring>
        <name>get_sycl_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the underlying SYCL queue object. <simplesect kind="return"><para>SYCL queue object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1040" column="21"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1stream_1a59985fa8746436057cf51a820ef8929c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1stream" kindref="compound">stream</ref> &amp;</type>
        <definition>stream&amp; dnnl::stream::wait</definition>
        <argsstring>()</argsstring>
        <name>wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for all primitives executing in the stream to finish. <simplesect kind="return"><para>The stream itself. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1044" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An execution stream. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dnnl.hpp" line="1007" column="13" bodyfile="include/dnnl.hpp" bodystart="1007" bodyend="1045"/>
    <listofallmembers>
      <member refid="structdnnl_1_1stream_1abc7ec7dfa1718f366abd8f495164de59" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>flags</name></member>
      <member refid="structdnnl_1_1stream_1a53d7cf6f9281b670e8f2bd899b408110" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>get_sycl_queue</name></member>
      <member refid="structdnnl_1_1stream_1a4d5c6a4b863e4086d6522e2317ca00a0" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>stream</name></member>
      <member refid="structdnnl_1_1stream_1a681be26446cb86ddcc727f3a00a69cd9" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>stream</name></member>
      <member refid="structdnnl_1_1stream_1a007cd67c0fcb5e80d4fc67a4b7f9624b" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>stream</name></member>
      <member refid="structdnnl_1_1stream_1a59985fa8746436057cf51a820ef8929c" prot="public" virt="non-virtual"><scope>dnnl::stream</scope><name>wait</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
