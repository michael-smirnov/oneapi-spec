<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdnnl_1_1post__ops" kind="struct" language="C++" prot="public">
    <compoundname>dnnl::post_ops</compoundname>
    <includes refid="dnnl_8hpp" local="no">dnnl.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a8e1d47722db8f53b3689468788ec2c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::post_ops::post_ops</definition>
        <argsstring>()</argsstring>
        <name>post_ops</name>
        <briefdescription>
<para>Constructs an empty sequence of post-ops. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="659" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a84653b68d83c2d84d3ac432a8dc1f5fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dnnl::post_ops::len</definition>
        <argsstring>() const</argsstring>
        <name>len</name>
        <briefdescription>
<para>Returns the number of post-ops entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="662" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a454acad1a18f2763f07b42912778c0f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169" kindref="member">primitive::kind</ref></type>
        <definition>primitive::kind dnnl::post_ops::kind</definition>
        <argsstring>(int index) const</argsstring>
        <name>kind</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the primitive kind of post-op at entry with a certain index. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the post-op to return the kind for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Primitive kind of the post-op at the specified index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="667" column="21"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a078ab8ec15423d2b3d26f3619a78ca38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dnnl::post_ops::append_sum</definition>
        <argsstring>(float scale=1.)</argsstring>
        <name>append_sum</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>1.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an accumulation (sum) post-op. Prior to accumulating the result, the previous value would be multiplied by a scaling factor <computeroutput>scale</computeroutput>.</para>
<para>The kind of this post-op is <ref refid="structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169a1d623b89683f9ce4e074de1676d12416" kindref="member">dnnl::primitive::kind::sum</ref>.</para>
<para>This feature may improve performance for cases like residual learning blocks, where the result of convolution is accumulated to the previously computed activations. The parameter <computeroutput>scale</computeroutput> may be used for the integer-based computations when the result and previous activations have different logical scaling factors.</para>
<para>In the simplest case when the accumulation is the only post-op, the computations would be <computeroutput>dst[:] := scale * dst[:] + op(...)</computeroutput> instead of <computeroutput>dst[:] := op(...)</computeroutput>.</para>
<para><simplesect kind="note"><para>This post-op executes in-place and does not change the destination layout.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="690" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1aaeb404084e7f9c65e8e266acca2ea6ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dnnl::post_ops::get_params_sum</definition>
        <argsstring>(int index, float &amp;scale) const</argsstring>
        <name>get_params_sum</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the parameters of an accumulation (sum) post-op.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the sum post-op. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor of the sum post-op. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="696" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a66606f08467b19091e696b52a2f789e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dnnl::post_ops::append_eltwise</definition>
        <argsstring>(float scale, algorithm algorithm, float alpha, float beta)</argsstring>
        <name>append_eltwise</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640" kindref="member">algorithm</ref></type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an elementwise post-op.</para>
<para>The kind of this post-op is <ref refid="structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169a98b908c7d0339bb6a4832db44fc2c8da" kindref="member">dnnl::primitive::kind::eltwise</ref>.</para>
<para>In the simplest case when the elementwise is the only post-op, the computations would be <computeroutput>dst[:] := scale * eltwise_op (op(...))</computeroutput> instead of <computeroutput>dst[:] &lt;- op(...)</computeroutput>.</para>
<para>where eltwise_op is configured with the given parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Elementwise algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Alpha parameter for the elementwise algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Beta parameter for the elementwise algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="712" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1post__ops_1a9b9a693f7b369058debb5fe818eca631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dnnl::post_ops::get_params_eltwise</definition>
        <argsstring>(int index, float &amp;scale, algorithm &amp;algorithm, float &amp;alpha, float &amp;beta) const</argsstring>
        <name>get_params_eltwise</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640" kindref="member">algorithm</ref> &amp;</type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns parameters of an elementwise post-up.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the post-op. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Output scaling factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output elementwise algorithm kind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Output alpha parameter for the elementwise algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Output beta parameter for the elementwise algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="722" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Post-ops.</para>
<para>Post-ops are computations executed after the main primitive computations and are attached to the primitive via primitive attributes. </para>
    </detaileddescription>
    <location file="include/dnnl.hpp" line="657" column="15" bodyfile="include/dnnl.hpp" bodystart="657" bodyend="724"/>
    <listofallmembers>
      <member refid="structdnnl_1_1post__ops_1a66606f08467b19091e696b52a2f789e6" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>append_eltwise</name></member>
      <member refid="structdnnl_1_1post__ops_1a078ab8ec15423d2b3d26f3619a78ca38" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>append_sum</name></member>
      <member refid="structdnnl_1_1post__ops_1a9b9a693f7b369058debb5fe818eca631" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>get_params_eltwise</name></member>
      <member refid="structdnnl_1_1post__ops_1aaeb404084e7f9c65e8e266acca2ea6ac" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>get_params_sum</name></member>
      <member refid="structdnnl_1_1post__ops_1a454acad1a18f2763f07b42912778c0f8" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>kind</name></member>
      <member refid="structdnnl_1_1post__ops_1a84653b68d83c2d84d3ac432a8dc1f5fd" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>len</name></member>
      <member refid="structdnnl_1_1post__ops_1a8e1d47722db8f53b3689468788ec2c01" prot="public" virt="non-virtual"><scope>dnnl::post_ops</scope><name>post_ops</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
