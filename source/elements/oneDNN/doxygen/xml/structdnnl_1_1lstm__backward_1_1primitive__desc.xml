<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdnnl_1_1lstm__backward_1_1primitive__desc" kind="struct" language="C++" prot="public">
    <compoundname>dnnl::lstm_backward::primitive_desc</compoundname>
    <basecompoundref refid="structdnnl_1_1rnn__primitive__desc__base" prot="public" virt="non-virtual">dnnl::rnn_primitive_desc_base</basecompoundref>
    <includes refid="dnnl_8hpp" local="no">dnnl.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1af409a57d712b87ca97daa6533f69da18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_backward::primitive_desc::primitive_desc</definition>
        <argsstring>()</argsstring>
        <name>primitive_desc</name>
        <briefdescription>
<para>Default constructor. Produces an empty object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5501" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a8c07bec7095b49d9db815ed185f2af4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_backward::primitive_desc::primitive_desc</definition>
        <argsstring>(const desc &amp;desc, const engine &amp;engine, const lstm_forward::primitive_desc &amp;hint_fwd_pd, bool allow_empty=false)</argsstring>
        <name>primitive_desc</name>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__backward_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__forward_1_1primitive__desc" kindref="compound">lstm_forward::primitive_desc</ref> &amp;</type>
          <declname>hint_fwd_pd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_empty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a primitive descriptor for an LSTM backward propagation primitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for LSTM backward propagation primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hint_fwd_pd</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive descriptor for an LSTM forward propagation primitive. It is used as a hint for deciding which memory format to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_empty</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag signifying whether construction is allowed to fail without throwing an exception. In this case an empty object will be produced. This flag is optional and defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5515" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7b9be423747e099150c938150b0b2f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::lstm_backward::primitive_desc::primitive_desc</definition>
        <argsstring>(const desc &amp;desc, const primitive_attr &amp;attr, const engine &amp;engine, const lstm_forward::primitive_desc &amp;hint_fwd_pd, bool allow_empty=false)</argsstring>
        <name>primitive_desc</name>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__backward_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1primitive__attr" kindref="compound">primitive_attr</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1lstm__forward_1_1primitive__desc" kindref="compound">lstm_forward::primitive_desc</ref> &amp;</type>
          <declname>hint_fwd_pd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_empty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a primitive descriptor for an LSTM backward propagation primitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for an LSTM backward propagation primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive attributes to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hint_fwd_pd</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive descriptor for an LSTM forward propagation primitive. It is used as a hint for deciding which memory format to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_empty</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag signifying whether construction is allowed to fail without throwing an exception. In this case an empty object will be produced. This flag is optional and defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5532" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a3659b46ba6d6d04a7ff416bb813c39fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::src_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source layer memory descriptor. <simplesect kind="return"><para>Source layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5538" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a6adf5abfc5e0d64eb26713c0d2a5aed6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::src_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5541" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1aa5b5b2c30ac63d88b14df056b4706cca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::src_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>src_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5544" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1ace7359f78f3e0cf9c80412ce130dd144" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::weights_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>weights_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns weights layer memory descriptor. <simplesect kind="return"><para>Weights layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5547" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a0daa23fec7194553abac9535716bc6e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::weights_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>weights_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns weights iteration memory descriptor. <simplesect kind="return"><para>Weights iteration memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5550" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a97d40d6d41f51d3985db0ddf5c6fe3d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::bias_desc</definition>
        <argsstring>() const</argsstring>
        <name>bias_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns bias memory descriptor. <simplesect kind="return"><para>Bias memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a bias parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5553" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1aa62fe0ea10ca14021330599994538def" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::dst_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns destination layer memory descriptor. <simplesect kind="return"><para>Destination layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5556" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a3bd545695c4d625c9856520789a0e34e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::dst_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns destination iteration memory descriptor. <simplesect kind="return"><para>Destination iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a destination iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5559" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a35275df9da984cdcd135b30941b0766c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::dst_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>dst_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns source iteration memory descriptor. <simplesect kind="return"><para>Source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5562" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1af661a9e27013725a9fdf6aaba6a7b06a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::workspace_desc</definition>
        <argsstring>() const</argsstring>
        <name>workspace_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the workspace memory descriptor. <simplesect kind="return"><para>Workspace memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not require workspace parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5565" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a5d639c4e986db14577b74890579789fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_src_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_src_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff source layer memory descriptor. <simplesect kind="return"><para>Diff source layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5568" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1ab2bdb5e6b5696c425582d0b5948cbfd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_src_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_src_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff source iteration memory descriptor. <simplesect kind="return"><para>Diff source iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a diff source iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5571" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1af66e2af6de27f737d17c4d05d1b5714f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_src_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_src_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff source recurrent cell state memory descriptor. <simplesect kind="return"><para>Diff source recurrent cell state memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5574" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1aed6c10c83a400320aa797724855914e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_weights_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_weights_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff weights layer memory descriptor. <simplesect kind="return"><para>Diff weights layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5577" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7790dd3353fd2a9665c55b5dbb2c9792" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_weights_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_weights_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff weights iteration memory descriptor. <simplesect kind="return"><para>Diff weights iteration memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5580" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7f9abbdefe0dd122ee9afaa7445813d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_bias_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_bias_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff bias memory descriptor. <simplesect kind="return"><para>Diff bias memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a diff bias parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5583" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1ac56eccc1f7c254ad7a612561221bc2c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_dst_layer_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_dst_layer_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff destination layer memory descriptor. <simplesect kind="return"><para>Diff destination layer memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5586" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1a0ff4550a4cffded7a5ed94fb8746a4d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_dst_iter_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_dst_iter_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff destination iteration memory descriptor. <simplesect kind="return"><para>Diff destination iteration memory descriptor. </para>
</simplesect>
<simplesect kind="return"><para>A zero memory descriptor if the primitive does not have a diff destination iteration parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5589" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1lstm__backward_1_1primitive__desc_1aaa5aaba04fdad31a2cb86f59738a6e89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">memory::desc</ref></type>
        <definition>memory::desc dnnl::lstm_backward::primitive_desc::diff_dst_iter_c_desc</definition>
        <argsstring>() const</argsstring>
        <name>diff_dst_iter_c_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns diff destination recurrent cell state memory descriptor. <simplesect kind="return"><para>Diff destination recurrent cell state memory descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="5592" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Primitive descriptor for LSTM backward propagation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dnnl::rnn_primitive_desc_base</label>
        <link refid="structdnnl_1_1rnn__primitive__desc__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dnnl::primitive_desc_base</label>
        <link refid="structdnnl_1_1primitive__desc__base"/>
      </node>
      <node id="1">
        <label>dnnl::lstm_backward::primitive_desc</label>
        <link refid="structdnnl_1_1lstm__backward_1_1primitive__desc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dnnl::primitive_desc</label>
        <link refid="structdnnl_1_1primitive__desc"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dnnl::rnn_primitive_desc_base</label>
        <link refid="structdnnl_1_1rnn__primitive__desc__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dnnl::primitive_desc_base</label>
        <link refid="structdnnl_1_1primitive__desc__base"/>
      </node>
      <node id="1">
        <label>dnnl::lstm_backward::primitive_desc</label>
        <link refid="structdnnl_1_1lstm__backward_1_1primitive__desc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dnnl::primitive_desc</label>
        <link refid="structdnnl_1_1primitive__desc"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dnnl.hpp" line="5499" column="56" bodyfile="include/dnnl.hpp" bodystart="5499" bodyend="5593"/>
    <listofallmembers>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a97d40d6d41f51d3985db0ddf5c6fe3d0" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>bias_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7f9abbdefe0dd122ee9afaa7445813d1" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_bias_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a60f17d04c493c42e4a50ad5feff5c8ca" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_dst_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a6b9fb7da987329256c04db6ecbb9dc36" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_dst_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1aaa5aaba04fdad31a2cb86f59738a6e89" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_dst_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a0ff4550a4cffded7a5ed94fb8746a4d4" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_dst_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1ac56eccc1f7c254ad7a612561221bc2c4" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_dst_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a733e6ff4e78a758e69ae6232e8955871" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_src_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ab4268c6bb70dd6c22de43141cc301b77" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_src_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1af66e2af6de27f737d17c4d05d1b5714f" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_src_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1ab2bdb5e6b5696c425582d0b5948cbfd3" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_src_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a5d639c4e986db14577b74890579789fd" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_src_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a192f7b334efac9a5ac20344a76d4d552" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_weights_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af51378982968e2b4f7abb6a32acfb0af" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_weights_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7790dd3353fd2a9665c55b5dbb2c9792" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_weights_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1aed6c10c83a400320aa797724855914e3" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>diff_weights_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a495ee7c8e1ec3eab35f6329fdcd352bb" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>dst_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1addbec977643a7900f4156f7aab3fb4db" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>dst_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a35275df9da984cdcd135b30941b0766c" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>dst_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a3bd545695c4d625c9856520789a0e34e" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>dst_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1aa62fe0ea10ca14021330599994538def" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>dst_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a32f7477c79e715a341bb9127df521fbc" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>get_engine</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a0ef600ea3666f0fd93c9c5d112aaf05c" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>get_primitive_attr</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ae680492d4e4b16a938cfc051e5c906be" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>impl_info_str</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1af409a57d712b87ca97daa6533f69da18" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a8c07bec7095b49d9db815ed185f2af4e" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a7b9be423747e099150c938150b0b2f6b" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>primitive_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1abaec6897940cf14b0b3113a593ec5dbf" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>primitive_desc_base</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a35d24b553ba6aa807516e9470fdd7d16" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>query_md</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1acbedc4257eaa26f868356f9f594a856a" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>query_s64</name></member>
      <member refid="structdnnl_1_1rnn__primitive__desc__base_1a8ecd7977ed8cf79c9e131139a034c2e1" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>rnn_primitive_desc_base</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a6238358ec03afd57fb20dffa65b48d2f" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>scratchpad_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1ad4079e0891373bd2dc841f3f94cf47ed" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>scratchpad_engine</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af42e791f493e636c086e13c6d4c06b43" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>src_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1af48dcff294cadb2916fd784b8474d221" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>src_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1aa5b5b2c30ac63d88b14df056b4706cca" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>src_iter_c_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a6adf5abfc5e0d64eb26713c0d2a5aed6" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>src_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a3659b46ba6d6d04a7ff416bb813c39fc" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>src_layer_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1acb13d08987cca8d8f05ec4858fa61fb4" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>weights_desc</name></member>
      <member refid="structdnnl_1_1primitive__desc__base_1a93f0904566b399874c47b3b1ad3d1495" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>weights_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1a0daa23fec7194553abac9535716bc6e1" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>weights_iter_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1ace7359f78f3e0cf9c80412ce130dd144" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>weights_layer_desc</name></member>
      <member refid="structdnnl_1_1lstm__backward_1_1primitive__desc_1af661a9e27013725a9fdf6aaba6a7b06a" prot="public" virt="non-virtual"><scope>dnnl::lstm_backward::primitive_desc</scope><name>workspace_desc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
