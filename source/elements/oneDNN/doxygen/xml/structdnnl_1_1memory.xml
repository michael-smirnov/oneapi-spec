<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdnnl_1_1memory" kind="struct" language="C++" prot="public">
    <compoundname>dnnl::memory</compoundname>
    <includes refid="dnnl_8hpp" local="no">dnnl.hpp</includes>
    <innerclass refid="structdnnl_1_1memory_1_1desc" prot="public">dnnl::memory::desc</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce" prot="public" static="no" strong="yes">
        <type></type>
        <name>data_type</name>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaf31ee5e3824f1f5e5d206bdf3029f22b" prot="public">
          <name>undef</name>
          <briefdescription>
<para>Undefined data type (used for empty memory descriptors). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaa2449b6477c1fef79be4202906486876" prot="public">
          <name>f16</name>
          <briefdescription>
<para>16-bit/half-precision floating point. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceafe2904d9fb3b0f4a81c92b03dec11424" prot="public">
          <name>bf16</name>
          <briefdescription>
<para>non-standard 16-bit floating point with 7-bit mantissa. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dcea512dc597be7ae761876315165dc8bd2e" prot="public">
          <name>f32</name>
          <briefdescription>
<para>32-bit/single-precision floating point. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaa860868d23f3a68323a2e3f6563d7f31" prot="public">
          <name>s32</name>
          <briefdescription>
<para>32-bit signed integer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dcea3e8d88fdd85d7153525e0647cdd97686" prot="public">
          <name>s8</name>
          <briefdescription>
<para>8-bit signed integer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dcea077393852be20e37026d6281827662f2" prot="public">
          <name>u8</name>
          <briefdescription>
<para>8-bit unsigned integer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data type specification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1123" column="25" bodyfile="include/dnnl.hpp" bodystart="1123" bodyend="1138"/>
      </memberdef>
      <memberdef kind="enum" id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3f" prot="public" static="no" strong="yes">
        <type></type>
        <name>format_tag</name>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faf31ee5e3824f1f5e5d206bdf3029f22b" prot="public">
          <name>undef</name>
          <briefdescription>
<para>Undefined memory format tag. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa100b8cad7cf2a56f6df78f171f97a1ec" prot="public">
          <name>any</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Placeholder memory format tag. Used to instruct the primitive to select a format automatically. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa0cc175b9c0f1b6a831c399e269772661" prot="public">
          <name>a</name>
          <briefdescription>
<para>plain 1D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" prot="public">
          <name>ab</name>
          <briefdescription>
<para>plain 2D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa07159c47ee1b19ae4fb9c40d480856c4" prot="public">
          <name>ba</name>
          <briefdescription>
<para>permuted 2D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa900150983cd24fb0d6963f7d28e17f72" prot="public">
          <name>abc</name>
          <briefdescription>
<para>plain 3D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5ff832d9bca8241d653279756f3ccd11" prot="public">
          <name>acb</name>
          <briefdescription>
<para>permuted 3D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa79ec16df80b57696a03bb364410061f3" prot="public">
          <name>bac</name>
          <briefdescription>
<para>permuted 3D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab64eab8ce39e013604e243089c687e4f" prot="public">
          <name>bca</name>
          <briefdescription>
<para>permuted 3D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa3944b025c9ca7eec3154b44666ae04a0" prot="public">
          <name>cba</name>
          <briefdescription>
<para>permuted 3D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae2fc714c4727ee9395f324cd2e7f331f" prot="public">
          <name>abcd</name>
          <briefdescription>
<para>plain 4D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa776649ab3d00664587b889457db87da7" prot="public">
          <name>acdb</name>
          <briefdescription>
<para>permuted 4D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5a3b732e0600663606054f6d8dfd465e" prot="public">
          <name>bacd</name>
          <briefdescription>
<para>permuted 4D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa078c4e73146ba90c3e4e9daa1facac28" prot="public">
          <name>bcda</name>
          <briefdescription>
<para>permuted 4D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faff2458511a39d703bd273eabbb1395d6" prot="public">
          <name>cdba</name>
          <briefdescription>
<para>permuted 4D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faab56b4d92b40713acc5af89985d4b786" prot="public">
          <name>abcde</name>
          <briefdescription>
<para>plain 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa7a05226d93263d6fc613f52400f7416d" prot="public">
          <name>abdec</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae0e56a95aff0ee48fc44e8a4faf69adb" prot="public">
          <name>acbde</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faf95d333a023ac787b43babc5b5c480ae" prot="public">
          <name>acdeb</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa6debec47fc73823aa65cc49b94b7e1fb" prot="public">
          <name>bcdea</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fafafcbfdfcede01281676ab63df88a919" prot="public">
          <name>cdeba</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab9a152e018d02395e6e94c5619da4a91" prot="public">
          <name>decab</name>
          <briefdescription>
<para>permuted 5D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae80b5017098950fc58aad83c8c14978e" prot="public">
          <name>abcdef</name>
          <briefdescription>
<para>plain 6D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa66fd87374b1ec6be9fdbea534e17adeb" prot="public">
          <name>acbdef</name>
          <briefdescription>
<para>plain 6D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fac9cdbbb9640597fea44206cee7f8a151" prot="public">
          <name>defcab</name>
          <briefdescription>
<para>plain 6D tensor </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa9dd4e461268c8034f5c8564e155c67a6" prot="public">
          <name>x</name>
          <initializer>= a</initializer>
          <briefdescription>
<para>1D tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa0cc175b9c0f1b6a831c399e269772661" kindref="member">dnnl::memory::format_tag::a</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa1e7342845e24eb3b5b3554490da1c128" prot="public">
          <name>nc</name>
          <initializer>= ab</initializer>
          <briefdescription>
<para>2D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" kindref="member">dnnl::memory::format_tag::ab</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa7efdfc94655a25dcea3ec85e9bb703fa" prot="public">
          <name>cn</name>
          <initializer>= ba</initializer>
          <briefdescription>
<para>2D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa07159c47ee1b19ae4fb9c40d480856c4" kindref="member">dnnl::memory::format_tag::ba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faaafb96b2fa8806be307c4496867bad56" prot="public">
          <name>tn</name>
          <initializer>= ab</initializer>
          <briefdescription>
<para>2D RNN statistics tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" kindref="member">dnnl::memory::format_tag::ab</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa25930e3036f13852cb0b29694bbab611" prot="public">
          <name>nt</name>
          <initializer>= ba</initializer>
          <briefdescription>
<para>2D RNN statistics tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa07159c47ee1b19ae4fb9c40d480856c4" kindref="member">dnnl::memory::format_tag::ba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fabc4eee572ad38f8a5c2534e0b2533100" prot="public">
          <name>ncw</name>
          <initializer>= abc</initializer>
          <briefdescription>
<para>3D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa900150983cd24fb0d6963f7d28e17f72" kindref="member">dnnl::memory::format_tag::abc</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faccc0543dc9272f9fffd720fe55f818e4" prot="public">
          <name>nwc</name>
          <initializer>= acb</initializer>
          <briefdescription>
<para>3D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5ff832d9bca8241d653279756f3ccd11" kindref="member">dnnl::memory::format_tag::acb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faded7ac40158367123c5467281d44cbeb" prot="public">
          <name>nchw</name>
          <initializer>= abcd</initializer>
          <briefdescription>
<para>4D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae2fc714c4727ee9395f324cd2e7f331f" kindref="member">dnnl::memory::format_tag::abcd</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa763cbf7ba1b7b8793dcdc6e2157b5c42" prot="public">
          <name>nhwc</name>
          <initializer>= acdb</initializer>
          <briefdescription>
<para>4D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa776649ab3d00664587b889457db87da7" kindref="member">dnnl::memory::format_tag::acdb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fafd2263500e815d8ce46e79e6b178a10a" prot="public">
          <name>chwn</name>
          <initializer>= bcda</initializer>
          <briefdescription>
<para>4D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa078c4e73146ba90c3e4e9daa1facac28" kindref="member">dnnl::memory::format_tag::bcda</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae7a84f08ef10d4fe3096307c6d9770fd" prot="public">
          <name>ncdhw</name>
          <initializer>= abcde</initializer>
          <briefdescription>
<para>5D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faab56b4d92b40713acc5af89985d4b786" kindref="member">dnnl::memory::format_tag::abcde</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fad2f2770ca9883423f680fd4a29481d64" prot="public">
          <name>ndhwc</name>
          <initializer>= acdeb</initializer>
          <briefdescription>
<para>5D CNN activations tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faf95d333a023ac787b43babc5b5c480ae" kindref="member">dnnl::memory::format_tag::acdeb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faa2e63ee01401aaeca78be023dfbb8c59" prot="public">
          <name>oi</name>
          <initializer>= ab</initializer>
          <briefdescription>
<para>2D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" kindref="member">dnnl::memory::format_tag::ab</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faf98ed07a4d5f50f7de1410d905f1477f" prot="public">
          <name>io</name>
          <initializer>= ba</initializer>
          <briefdescription>
<para>2D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa07159c47ee1b19ae4fb9c40d480856c4" kindref="member">dnnl::memory::format_tag::ba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa3a8cb832bca6da72735b742014560a5b" prot="public">
          <name>oiw</name>
          <initializer>= abc</initializer>
          <briefdescription>
<para>3D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa900150983cd24fb0d6963f7d28e17f72" kindref="member">dnnl::memory::format_tag::abc</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa55e9a1b1cc2aaf0f5b7417d8098ea4b3" prot="public">
          <name>owi</name>
          <initializer>= acb</initializer>
          <briefdescription>
<para>3D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5ff832d9bca8241d653279756f3ccd11" kindref="member">dnnl::memory::format_tag::acb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5b12270b2f1c52cb9ae37905880a5a6f" prot="public">
          <name>wio</name>
          <initializer>= cba</initializer>
          <briefdescription>
<para>3D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa3944b025c9ca7eec3154b44666ae04a0" kindref="member">dnnl::memory::format_tag::cba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa7afa5d2c0d2aa139eb213430ec70d91d" prot="public">
          <name>iwo</name>
          <initializer>= bca</initializer>
          <briefdescription>
<para>3D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab64eab8ce39e013604e243089c687e4f" kindref="member">dnnl::memory::format_tag::bca</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa14b72a467aeefa06a5cb802ec4a7743c" prot="public">
          <name>oihw</name>
          <initializer>= abcd</initializer>
          <briefdescription>
<para>4D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae2fc714c4727ee9395f324cd2e7f331f" kindref="member">dnnl::memory::format_tag::abcd</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fadd942f902c741de7193e1869b13ba55a" prot="public">
          <name>hwio</name>
          <initializer>= cdba</initializer>
          <briefdescription>
<para>4D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faff2458511a39d703bd273eabbb1395d6" kindref="member">dnnl::memory::format_tag::cdba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab889a0cb4d051674706433941a2e867f" prot="public">
          <name>ohwi</name>
          <initializer>= acdb</initializer>
          <briefdescription>
<para>4D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa776649ab3d00664587b889457db87da7" kindref="member">dnnl::memory::format_tag::acdb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa56fe35ca9f339b4948384c2a2fa02de5" prot="public">
          <name>ihwo</name>
          <initializer>= bcda</initializer>
          <briefdescription>
<para>4D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa078c4e73146ba90c3e4e9daa1facac28" kindref="member">dnnl::memory::format_tag::bcda</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fac16710619e6550753801926b5388bef8" prot="public">
          <name>iohw</name>
          <initializer>= bacd</initializer>
          <briefdescription>
<para>4D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5a3b732e0600663606054f6d8dfd465e" kindref="member">dnnl::memory::format_tag::bacd</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa98407962f915285419b23f5b0a223882" prot="public">
          <name>oidhw</name>
          <initializer>= abcde</initializer>
          <briefdescription>
<para>5D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faab56b4d92b40713acc5af89985d4b786" kindref="member">dnnl::memory::format_tag::abcde</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faeafcb3d831eef23cde0b46f64646327c" prot="public">
          <name>dhwio</name>
          <initializer>= cdeba</initializer>
          <briefdescription>
<para>5D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fafafcbfdfcede01281676ab63df88a919" kindref="member">dnnl::memory::format_tag::cdeba</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fabf55006478a9dae3506eb67923703a1d" prot="public">
          <name>odhwi</name>
          <initializer>= acdeb</initializer>
          <briefdescription>
<para>5D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faf95d333a023ac787b43babc5b5c480ae" kindref="member">dnnl::memory::format_tag::acdeb</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa2b3d6389089fb08059ece8a9642b8991" prot="public">
          <name>idhwo</name>
          <initializer>= bcdea</initializer>
          <briefdescription>
<para>5D CNN weights tensor; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa6debec47fc73823aa65cc49b94b7e1fb" kindref="member">dnnl::memory::format_tag::bcdea</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa1f1bc797706732c22eb9987e3cea3e54" prot="public">
          <name>goiw</name>
          <initializer>= abcd</initializer>
          <briefdescription>
<para>4D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae2fc714c4727ee9395f324cd2e7f331f" kindref="member">dnnl::memory::format_tag::abcd</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa3dc0e53430a6368210356118196f821a" prot="public">
          <name>goihw</name>
          <initializer>= abcde</initializer>
          <briefdescription>
<para>5D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faab56b4d92b40713acc5af89985d4b786" kindref="member">dnnl::memory::format_tag::abcde</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fafd710c828421b3c91725b0e5aa53ecc6" prot="public">
          <name>hwigo</name>
          <initializer>= decab</initializer>
          <briefdescription>
<para>5D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab9a152e018d02395e6e94c5619da4a91" kindref="member">dnnl::memory::format_tag::decab</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa5f1d6f8a3a8842611d15affa574b864f" prot="public">
          <name>giohw</name>
          <initializer>= acbde</initializer>
          <briefdescription>
<para>5D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae0e56a95aff0ee48fc44e8a4faf69adb" kindref="member">dnnl::memory::format_tag::acbde</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3faa678de4e5a5e34c9a71a632b8f334b8b" prot="public">
          <name>goidhw</name>
          <initializer>= abcdef</initializer>
          <briefdescription>
<para>6D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae80b5017098950fc58aad83c8c14978e" kindref="member">dnnl::memory::format_tag::abcdef</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa4f2399cfdc9861fee9d39cb1d703aadc" prot="public">
          <name>giodhw</name>
          <initializer>= acbdef</initializer>
          <briefdescription>
<para>6D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fae80b5017098950fc58aad83c8c14978e" kindref="member">dnnl::memory::format_tag::abcdef</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab291a9717fdf353288d2d6082d578059" prot="public">
          <name>dhwigo</name>
          <initializer>= defcab</initializer>
          <briefdescription>
<para>6D CNN weights tensor with groups; an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fac9cdbbb9640597fea44206cee7f8a151" kindref="member">dnnl::memory::format_tag::defcab</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fac775cf954921a129a65eb929476de911" prot="public">
          <name>tnc</name>
          <initializer>= abc</initializer>
          <briefdescription>
<para>3D RNN data tensor in the format (seq_length, batch, input channels). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa6758344f9f89d390953c6718f34e9be1" prot="public">
          <name>ntc</name>
          <initializer>= bac</initializer>
          <briefdescription>
<para>3D RNN data tensor in the format (batch, seq_length, input channels). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab49be97ff353a86d84d06d98f846b61d" prot="public">
          <name>ldnc</name>
          <initializer>= abcd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4D RNN states tensor in the format (num_layers, num_directions, batch, state channels). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa4e62e330c56963f9ead98490cd57ef7b" prot="public">
          <name>ldigo</name>
          <initializer>= abcde</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>5D RNN weights tensor in the format (num_layers, num_directions, input_channels, num_gates, output_channels).</para>
<para><itemizedlist>
<listitem><para>For LSTM cells, the gates order is input, forget, candidate and output gate.</para>
</listitem><listitem><para>For GRU cells, the gates order is update, reset and output gate. </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa4c850fa02c9e56a4c20dbfde737f1f8d" prot="public">
          <name>ldgoi</name>
          <initializer>= abdec</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>5D RNN weights tensor in the format (num_layers, num_directions, num_gates, output_channels, input_channels).</para>
<para><itemizedlist>
<listitem><para>For LSTM cells, the gates order is input, forget, candidate and output gate.</para>
</listitem><listitem><para>For GRU cells, the gates order is update, reset and output gate. </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fab8690cd92ccee6a0ad55faccc0346aab" prot="public">
          <name>ldgo</name>
          <initializer>= abcd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4D RNN bias tensor in the format (num_layers, num_directions, num_gates, output_channels).</para>
<para><itemizedlist>
<listitem><para>For LSTM cells, the gates order is input, forget, candidate and output gate.</para>
</listitem><listitem><para>For GRU cells, the gates order is update, reset and output gate. </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory format tag specification.</para>
<para>Memory format tags can be further divided into two categories:</para>
<para><itemizedlist>
<listitem><para>Domain-agnostic names, i.e. names that do not depend on the tensor usage in the specific primitive. These names use letters from <computeroutput>a</computeroutput> to <computeroutput>l</computeroutput> to denote logical dimensions and form the order in which the dimensions are laid in memory. For example, <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" kindref="member">dnnl::memory::format_tag::ab</ref> is used to denote a 2D tensor where the second logical dimension (denoted as <computeroutput>b</computeroutput>) is the innermost, i.e. has stride = 1, and the first logical dimension (<computeroutput>a</computeroutput>) is laid out in memory with stride equal to the size of the second dimension. On the other hand, <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa07159c47ee1b19ae4fb9c40d480856c4" kindref="member">dnnl::memory::format_tag::ba</ref> is the transposed version of the same tensor: the outermost dimension (<computeroutput>a</computeroutput>) becomes the innermost one.</para>
</listitem><listitem><para>Domain-specific names, i.e. names that make sense only in the context of a certain domain, such as CNN. These names are aliases to the corresponding domain-agnostic tags and used mostly for convenience. For example, <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa1e7342845e24eb3b5b3554490da1c128" kindref="member">dnnl::memory::format_tag::nc</ref> is used to denote 2D CNN activations tensor memory format, where the channels dimension is the innermost one and the batch dimension is the outermost one. Moreover, <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa1e7342845e24eb3b5b3554490da1c128" kindref="member">dnnl::memory::format_tag::nc</ref> is an alias for <ref refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3fa187ef4436122d1cc2f40dc2b92f0eba0" kindref="member">dnnl::memory::format_tag::ab</ref>, because for CNN primitives the logical dimensions of activations tensors come in order: batch, channels, spatial. In other words, batch corresponds to the first logical dimension (<computeroutput>a</computeroutput>), and channels correspond to the second one (<computeroutput>b</computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para>The following domain-specific notation applies to memory format tags:<itemizedlist>
<listitem><para><computeroutput>&apos;n&apos;</computeroutput> denotes the mini-batch dimension</para>
</listitem><listitem><para><computeroutput>&apos;c&apos;</computeroutput> denotes a channels dimension</para>
</listitem><listitem><para>When there are multiple channel dimensions (for example, in convolution weights tensor), <computeroutput>&apos;i&apos;</computeroutput> and <computeroutput>&apos;o&apos;</computeroutput> denote dimensions of input and output channels</para>
</listitem><listitem><para><computeroutput>&apos;g&apos;</computeroutput> denotes a groups dimension for convolution weights</para>
</listitem><listitem><para><computeroutput>&apos;d&apos;</computeroutput>, <computeroutput>&apos;h&apos;</computeroutput>, and <computeroutput>&apos;w&apos;</computeroutput> denote spatial depth, height, and width respectively </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1179" column="26" bodyfile="include/dnnl.hpp" bodystart="1179" bodyend="1336"/>
      </memberdef>
      <memberdef kind="typedef" id="structdnnl_1_1memory_1af647d5cd96f05e7876a5826ac83d9bd6" prot="public" static="no">
        <type>int64_t</type>
        <definition>using dnnl::memory::dim =  int64_t</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <briefdescription>
<para>Integer type for representing dimension sizes and indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1117" column="5" bodyfile="include/dnnl.hpp" bodystart="1117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structdnnl_1_1memory_1a7d9f4b6ad8caf3969f436cd9ff27e9bb" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structdnnl_1_1memory_1af647d5cd96f05e7876a5826ac83d9bd6" kindref="member">dim</ref> &gt;</type>
        <definition>using dnnl::memory::dims =  std::vector&lt;dim&gt;</definition>
        <argsstring></argsstring>
        <name>dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of dimensions. Implementations are free to force a limit on the vector&apos;s length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1120" column="5" bodyfile="include/dnnl.hpp" bodystart="1120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdnnl_1_1memory_1a078c619ff6b4efe873e635f1178391cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::memory::memory</definition>
        <argsstring>()</argsstring>
        <name>memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1510" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1a7349cd8dd17e53fbde7648fd7dc108a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::memory::memory</definition>
        <argsstring>(const desc &amp;md, const engine &amp;engine, void *handle)</argsstring>
        <name>memory</name>
        <param>
          <type>const <ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a memory object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to store the data on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the memory buffer to use as an underlying storage. On CPU this is a pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1518" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1a8ae911088bc89746e49146c18d86ac3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>ndims</declname>
            <defname>ndims</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dnnl::memory::memory</definition>
        <argsstring>(const desc &amp;md, const engine &amp;engine, cl::sycl::buffer&lt; T, ndims &gt; &amp;buf)</argsstring>
        <name>memory</name>
        <param>
          <type>const <ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>cl::sycl::buffer&lt; T, ndims &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a memory object from a SYCL buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>SYCL buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1526" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1aa28e9a81e89a97b90b49535dc3a5c96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnnl::memory::memory</definition>
        <argsstring>(const desc &amp;md, const engine &amp;engine)</argsstring>
        <name>memory</name>
        <param>
          <type>const <ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">desc</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const <ref refid="structdnnl_1_1engine" kindref="compound">engine</ref> &amp;</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a memory object.</para>
<para>The underlying storage for the memory will be allocated by the library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>Engine to store the data on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1535" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1ad8a1ad28ed7acf9c34c69e4b882c6e92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1memory_1_1desc" kindref="compound">desc</ref></type>
        <definition>desc dnnl::memory::get_desc</definition>
        <argsstring>() const</argsstring>
        <name>get_desc</name>
        <briefdescription>
<para>Returns the associated memory descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1538" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1a9074709c5af8dc9d25dd9a98c4d1dbd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdnnl_1_1engine" kindref="compound">engine</ref></type>
        <definition>engine dnnl::memory::get_engine</definition>
        <argsstring>() const</argsstring>
        <name>get_engine</name>
        <briefdescription>
<para>Returns the associated engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1541" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1a8968c24c4a95255f68ab2a483769343d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dnnl::memory::get_data_handle</definition>
        <argsstring>() const</argsstring>
        <name>get_data_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the underlying memory buffer.</para>
<para>On the CPU engine, or when using USM, this is a pointer to the allocated memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1547" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1ab0ca87db309b17d747ec8e0d3adcdd15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dnnl::memory::set_data_handle</definition>
        <argsstring>(void *handle) const</argsstring>
        <name>set_data_handle</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets memory buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory buffer to use as the underlying storage. It must have at least <ref refid="structdnnl_1_1memory_1ad8a1ad28ed7acf9c34c69e4b882c6e92" kindref="member">get_desc()</ref>.get_size() bytes allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1553" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1a170571437afeabe2923477fdd6eea2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>ndims</declname>
            <defname>ndims</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>cl::sycl::buffer&lt; T, ndims &gt;</type>
        <definition>cl::sycl::buffer&lt;T, ndims&gt; dnnl::memory::get_sycl_buffer</definition>
        <argsstring>(size_t *offset=nullptr) const</argsstring>
        <name>get_sycl_buffer</name>
        <param>
          <type>size_t *</type>
          <declname>offset</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the underlying SYCL buffer object.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the requested buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions of the requested buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within the returned buffer at which the memory object&apos;s data starts. Only meaningful for 1D buffers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1562" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structdnnl_1_1memory_1aaf55a9972d3af57d6a4997520c6067e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>ndims</declname>
            <defname>ndims</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dnnl::memory::set_sycl_buffer</definition>
        <argsstring>(cl::sycl::buffer&lt; T, ndims &gt; &amp;buf)</argsstring>
        <name>set_sycl_buffer</name>
        <param>
          <type>cl::sycl::buffer&lt; T, ndims &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the underlying buffer to the given SYCL buffer.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>SYCL buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dnnl.hpp" line="1570" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Memory object.</para>
<para>A memory object encapsulates a handle to a memory buffer allocated on a specific engine, tensor dimensions, data type, and memory format, which is the way tensor indices map to offsets in linear memory space. Memory objects are passed to primitives during execution. </para>
    </detaileddescription>
    <location file="include/dnnl.hpp" line="1115" column="13" bodyfile="include/dnnl.hpp" bodystart="1115" bodyend="1571"/>
    <listofallmembers>
      <member refid="structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>data_type</name></member>
      <member refid="structdnnl_1_1memory_1af647d5cd96f05e7876a5826ac83d9bd6" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>dim</name></member>
      <member refid="structdnnl_1_1memory_1a7d9f4b6ad8caf3969f436cd9ff27e9bb" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>dims</name></member>
      <member refid="structdnnl_1_1memory_1a8e71077ed6a5f7fb7b3e6e1a5a2ecf3f" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>format_tag</name></member>
      <member refid="structdnnl_1_1memory_1a8968c24c4a95255f68ab2a483769343d" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>get_data_handle</name></member>
      <member refid="structdnnl_1_1memory_1ad8a1ad28ed7acf9c34c69e4b882c6e92" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>get_desc</name></member>
      <member refid="structdnnl_1_1memory_1a9074709c5af8dc9d25dd9a98c4d1dbd3" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>get_engine</name></member>
      <member refid="structdnnl_1_1memory_1a170571437afeabe2923477fdd6eea2fd" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>get_sycl_buffer</name></member>
      <member refid="structdnnl_1_1memory_1a078c619ff6b4efe873e635f1178391cb" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>memory</name></member>
      <member refid="structdnnl_1_1memory_1a7349cd8dd17e53fbde7648fd7dc108a9" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>memory</name></member>
      <member refid="structdnnl_1_1memory_1a8ae911088bc89746e49146c18d86ac3a" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>memory</name></member>
      <member refid="structdnnl_1_1memory_1aa28e9a81e89a97b90b49535dc3a5c96e" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>memory</name></member>
      <member refid="structdnnl_1_1memory_1ab0ca87db309b17d747ec8e0d3adcdd15" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>set_data_handle</name></member>
      <member refid="structdnnl_1_1memory_1aaf55a9972d3af57d6a4997520c6067e4" prot="public" virt="non-virtual"><scope>dnnl::memory</scope><name>set_sycl_buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
