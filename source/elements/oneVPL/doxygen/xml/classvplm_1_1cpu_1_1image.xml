<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classvplm_1_1cpu_1_1image" kind="class" language="C++" prot="public">
    <compoundname>vplm::cpu::image</compoundname>
    <basecompoundref refid="classvplm_1_1cpu__image" prot="public" virt="non-virtual">vplm::cpu_image</basecompoundref>
    <includes refid="vplm_09_09_8h" local="no">vplm++.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvplm_1_1cpu_1_1image_1a4e8b70fbda28126cd37b1584bf8fc896" prot="private" static="no" mutable="no">
        <type><ref refid="classvplm_1_1cpu_1_1memory" kindref="compound">vplm::cpu::memory</ref></type>
        <definition>vplm::cpu::memory vplm::cpu::image::memory_</definition>
        <argsstring></argsstring>
        <name>memory_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="382" column="23" bodyfile="include/vplmemory/vplm++.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvplm_1_1cpu_1_1image_1aeb00031638afbadf64f6776c3a87bd9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::cpu::image::image</definition>
        <argsstring>(const vplm::memory &amp;mem, uint64_t flags)</argsstring>
        <name>image</name>
        <param>
          <type>const <ref refid="classvplm_1_1memory" kindref="compound">vplm::memory</ref> &amp;</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="369" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="369" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1cpu_1_1image_1a6cee866311cdece4788e33574de024f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::cpu::image::~image</definition>
        <argsstring>()</argsstring>
        <name>~image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="376" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="376" bodyend="379"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CPU (HOST) image accessor. </para>
    </briefdescription>
    <detaileddescription>
<para>Helper class which maps memory object for CPU (HOST) access in constructor and unmaps in destructor. Example:</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;vplmemory/vplm++.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vplm::memory<sp/>mem<sp/>=<sp/>get_from_somewhere();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vplm::cpu::image<sp/>image(mem,<sp/>VPLM_ACCESS_MODE_READ);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;&gt;&gt;&gt;<sp/>first<sp/>plane<sp/>stride<sp/>is:<sp/>%d\n&quot;,<sp/>image.stride(0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>vplm::cpu_image</label>
        <link refid="classvplm_1_1cpu__image"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vplm::wrapper&lt; vplm_cpu_image &gt;</label>
        <link refid="classvplm_1_1wrapper"/>
      </node>
      <node id="1">
        <label>vplm::cpu::image</label>
        <link refid="classvplm_1_1cpu_1_1image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>vplm::cpu_image</label>
        <link refid="classvplm_1_1cpu__image"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>_vplm_vtable</label>
        <link refid="struct__vplm__vtable"/>
        <childnode refid="7" relation="usage">
          <edgelabel>va</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>cl</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>vplm::wrapper&lt; vplm_cpu_image &gt;</label>
        <link refid="classvplm_1_1wrapper"/>
        <childnode refid="4" relation="usage">
          <edgelabel>object_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>vplm_image_info</label>
        <link refid="structvplm__image__info"/>
      </node>
      <node id="7">
        <label>_vplm_va_vtable</label>
        <link refid="struct__vplm__va__vtable"/>
      </node>
      <node id="4">
        <label>vplm_cpu_image</label>
        <link refid="structvplm__cpu__image"/>
        <childnode refid="5" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>memory</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>vplm::cpu::image</label>
        <link refid="classvplm_1_1cpu_1_1image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>_vplm_cl_vtable</label>
        <link refid="struct__vplm__cl__vtable"/>
      </node>
    </collaborationgraph>
    <location file="include/vplmemory/vplm++.h" line="367" column="1" bodyfile="include/vplmemory/vplm++.h" bodystart="366" bodyend="383"/>
    <listofallmembers>
      <member refid="classvplm_1_1cpu__image_1a04df03987adc5f2612c8279314d83fff" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>buffer</name></member>
      <member refid="classvplm_1_1cpu__image_1a178a412df8aaedae3c61852ed17d5a14" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>buffer_size</name></member>
      <member refid="classvplm_1_1cpu__image_1a84485ee7e65df6468ab288dc76be61e2" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>data</name></member>
      <member refid="classvplm_1_1cpu__image_1a487c7e5b365a12e04aaa6a42cd87c29e" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>data</name></member>
      <member refid="classvplm_1_1cpu_1_1image_1aeb00031638afbadf64f6776c3a87bd9c" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>image</name></member>
      <member refid="classvplm_1_1cpu_1_1image_1a4e8b70fbda28126cd37b1584bf8fc896" prot="private" virt="non-virtual"><scope>vplm::cpu::image</scope><name>memory_</name></member>
      <member refid="classvplm_1_1wrapper_1a798603677edb68f06e196db09281a68f" prot="protected" virt="non-virtual"><scope>vplm::cpu::image</scope><name>object_</name></member>
      <member refid="classvplm_1_1wrapper_1ada0f50315cdc634c0114894f0eec844b" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a7da3f4d86ddf6351e22724e7b12d31d6" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a2da9a1c3ac7046862b28e00f1f37653a" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>operator()</name></member>
      <member refid="classvplm_1_1wrapper_1a6603d37b01bf19621f49803136f575fd" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>operator()</name></member>
      <member refid="classvplm_1_1wrapper_1ae9a073fb0ba546a1c00dddd84c46d48b" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>operator=</name></member>
      <member refid="classvplm_1_1cpu__image_1ac84fd5561f77dbe70f9e3802d143815e" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>stride</name></member>
      <member refid="classvplm_1_1cpu__image_1aa910e41b82cdc28f3e835eb80a31590a" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>strides</name></member>
      <member refid="classvplm_1_1wrapper_1a8ad143ad41c6f7c49ac60d61f67a39a5" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>wrapper</name></member>
      <member refid="classvplm_1_1wrapper_1a3de834fb4d08f1c99f7653b38e70eb63" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>wrapper</name></member>
      <member refid="classvplm_1_1cpu_1_1image_1a6cee866311cdece4788e33574de024f4" prot="public" virt="non-virtual"><scope>vplm::cpu::image</scope><name>~image</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
