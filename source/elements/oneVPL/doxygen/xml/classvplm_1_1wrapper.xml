<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classvplm_1_1wrapper" kind="class" language="C++" prot="public">
    <compoundname>vplm::wrapper</compoundname>
    <includes refid="vplm_09_09_8h" local="no">vplm++.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvplm_1_1wrapper_1a798603677edb68f06e196db09281a68f" prot="protected" static="no" mutable="no">
        <type>T</type>
        <definition>T vplm::wrapper&lt; T &gt;::object_</definition>
        <argsstring></argsstring>
        <name>object_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="80" column="7" bodyfile="include/vplmemory/vplm++.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvplm_1_1wrapper_1a8ad143ad41c6f7c49ac60d61f67a39a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::wrapper&lt; T &gt;::wrapper</definition>
        <argsstring>()</argsstring>
        <name>wrapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="45" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1a3de834fb4d08f1c99f7653b38e70eb63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::wrapper&lt; T &gt;::wrapper</definition>
        <argsstring>(const T &amp;other)</argsstring>
        <name>wrapper</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="49" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1ae9a073fb0ba546a1c00dddd84c46d48b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvplm_1_1wrapper" kindref="compound">wrapper</ref>&lt; T &gt; &amp;</type>
        <definition>wrapper&lt;T&gt;&amp; vplm::wrapper&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="53" column="13" bodyfile="include/vplmemory/vplm++.h" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1a2da9a1c3ac7046862b28e00f1f37653a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; vplm::wrapper&lt; T &gt;::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="59" column="7" bodyfile="include/vplmemory/vplm++.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1a6603d37b01bf19621f49803136f575fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; vplm::wrapper&lt; T &gt;::operator()</definition>
        <argsstring>() const</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="64" column="13" bodyfile="include/vplmemory/vplm++.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1ada0f50315cdc634c0114894f0eec844b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vplm::wrapper&lt; T &gt;::operator&amp;</definition>
        <argsstring>()</argsstring>
        <name>operator&amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="69" column="7" bodyfile="include/vplmemory/vplm++.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1wrapper_1a7da3f4d86ddf6351e22724e7b12d31d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* vplm::wrapper&lt; T &gt;::operator&amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator&amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="74" column="13" bodyfile="include/vplmemory/vplm++.h" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Intends to wrap vpl memory C-API structures. </para>
    </briefdescription>
    <detaileddescription>
<para>To access underlying C structure, use operator(). For example: wrapper&lt;vplm_image_info&gt; info; <ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref>&amp; c_info = info(); </para>
    </detaileddescription>
    <location file="include/vplmemory/vplm++.h" line="43" column="1" bodyfile="include/vplmemory/vplm++.h" bodystart="42" bodyend="81"/>
    <listofallmembers>
      <member refid="classvplm_1_1wrapper_1a798603677edb68f06e196db09281a68f" prot="protected" virt="non-virtual"><scope>vplm::wrapper</scope><name>object_</name></member>
      <member refid="classvplm_1_1wrapper_1ada0f50315cdc634c0114894f0eec844b" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a7da3f4d86ddf6351e22724e7b12d31d6" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a2da9a1c3ac7046862b28e00f1f37653a" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>operator()</name></member>
      <member refid="classvplm_1_1wrapper_1a6603d37b01bf19621f49803136f575fd" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>operator()</name></member>
      <member refid="classvplm_1_1wrapper_1ae9a073fb0ba546a1c00dddd84c46d48b" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>operator=</name></member>
      <member refid="classvplm_1_1wrapper_1a8ad143ad41c6f7c49ac60d61f67a39a5" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>wrapper</name></member>
      <member refid="classvplm_1_1wrapper_1a3de834fb4d08f1c99f7653b38e70eb63" prot="public" virt="non-virtual"><scope>vplm::wrapper</scope><name>wrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
