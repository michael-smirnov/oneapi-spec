<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vplm_8h" kind="file" language="C++">
    <compoundname>vplm.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">uchar.h</includes>
    <includedby refid="vpl__video_8h" local="no">include/vpl/vpl_video.h</includedby>
    <includedby refid="vplm_09_09_8h" local="no">include/vplmemory/vplm++.h</includedby>
    <includedby refid="vplm__opencl_09_09_8h" local="no">include/vplmemory/vplm_opencl++.h</includedby>
    <includedby refid="vplm__opencl_8h" local="no">include/vplmemory/vplm_opencl.h</includedby>
    <includedby refid="vplm__vaapi_09_09_8h" local="no">include/vplmemory/vplm_vaapi++.h</includedby>
    <includedby refid="vplm__vaapi_8h" local="no">include/vplmemory/vplm_vaapi.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>uchar.h</label>
      </node>
      <node id="1">
        <label>include/vplmemory/vplm.h</label>
        <link refid="vplm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/vpl/vpl_video.h</label>
        <link refid="vpl__video_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/vpl/vpl.hpp</label>
        <link refid="vpl_8hpp"/>
      </node>
      <node id="6">
        <label>include/vpl/vpl_context.hpp</label>
        <link refid="vpl__context_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/vplmemory/vplm_opencl++.h</label>
        <link refid="vplm__opencl_09_09_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/vpl/vpl_utils.h</label>
        <link refid="vpl__utils_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/vplmemory/vplm_sycl.h</label>
        <link refid="vplm__sycl_8h_source"/>
      </node>
      <node id="10">
        <label>include/vplmemory/vplm_opencl.h</label>
        <link refid="vplm__opencl_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/vplmemory/vplm_vaapi.h</label>
        <link refid="vplm__vaapi_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/vplmemory/vplm.h</label>
        <link refid="vplm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/vplmemory/vplm_vaapi++.h</label>
        <link refid="vplm__vaapi_09_09_8h_source"/>
      </node>
      <node id="7">
        <label>include/vplmemory/vplm++.h</label>
        <link refid="vplm_09_09_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/vpl/vpl_device.hpp</label>
        <link refid="vpl__device_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structvplm__size" prot="public">vplm_size</innerclass>
    <innerclass refid="structvplm__rect" prot="public">vplm_rect</innerclass>
    <innerclass refid="structvplm__variant" prot="public">vplm_variant</innerclass>
    <innerclass refid="structvplm__buffer__info" prot="public">vplm_buffer_info</innerclass>
    <innerclass refid="structvplm__cpu__buffer" prot="public">vplm_cpu_buffer</innerclass>
    <innerclass refid="structvplm__image__info" prot="public">vplm_image_info</innerclass>
    <innerclass refid="structvplm__cpu__image" prot="public">vplm_cpu_image</innerclass>
    <innerclass refid="struct__vplm__vtable" prot="public">_vplm_vtable</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="vplm_8h_1a484b32c8010a3b4d78675b56fda96b13" prot="public" static="no">
        <name>VPLM_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="41" column="10" bodyfile="include/vplmemory/vplm.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vplm_8h_1a241f9254878cda02af885d334bb9434a" prot="public" static="no">
        <name>VPLM_IMAGE_MAX_PLANES</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="204" column="9" bodyfile="include/vplmemory/vplm.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vplm_8h_1a40b01a4bf601f2308655151e04ff20af" prot="public" static="no">
        <name>VPLM_PROPERTY_CALLBACK_ON_DESTROY</name>
        <initializer>0x1000</initializer>
        <briefdescription>
<para>Specifies user-defined on destroy callback. </para>
        </briefdescription>
        <detaileddescription>
<para>User-defined callback function (see vplm_on_destroy_cb for prototype) will be called once object reference counter will reach 0, but before object will actually will be destroyed. In this way user can intersect with the object destruction and &quot;save&quot; it increasing reference counter and placing it in some pool. Library will check object reference counter once more upon the exit from the user callback function. If the counter will be 0 object will be destroyed, if not it will be kept alive. User must let the counter reach 0 for the object to be really destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="304" column="9" bodyfile="include/vplmemory/vplm.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vplm_8h_1a57edeee5b91b0a8ee1bbc1ae7ed03ebd" prot="public" static="no">
        <name>VPLM_PROPERTY_CUSTOM</name>
        <initializer>0x100000</initializer>
        <briefdescription>
<para>User defined custom properties start key. </para>
        </briefdescription>
        <detaileddescription>
<para>Keys range &lt; than this key is reserved for VPL Memory Library implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="312" column="9" bodyfile="include/vplmemory/vplm.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6c" prot="public" static="no" strong="no">
        <type></type>
        <name>_vplm_status</name>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca1eb53b72feee876ae26d94d79ca76c9c" prot="public">
          <name>VPLM_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Operation completed successfully. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca034e948f7b22c613e327300779b2f43d" prot="public">
          <name>VPLM_ERROR_UNSUPPORTED</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Operation is not supported. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca135d3748ef0976947ef160be1e51558f" prot="public">
          <name>VPLM_ERROR_INVALID_PARAMETER</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>Some parameter passed to function is invalid. </para>
          </briefdescription>
          <detaileddescription>
<para>Typically, function returns an object in the location specified by the pointer which is NULL. However, this status may also mean that some other parameter(s) are invalid. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6cadd12e5a627bbdc52ad084f4a14a9cb5d" prot="public">
          <name>VPLM_ERROR_INVALID_MEMORY_OBJECT</name>
          <initializer>= -3</initializer>
          <briefdescription>
<para>vplm_mem which was passed is invalid </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6caf417f9104d70a413dcdf60d5ee2e6913" prot="public">
          <name>VPLM_ERROR_INVALID_BUFFER_DESCRIPTION</name>
          <initializer>= -4</initializer>
          <briefdescription>
<para><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref> which was passed is invalid </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6cac01077456ca15f3c0564ef1cb905d2e7" prot="public">
          <name>VPLM_ERROR_INVALID_BUFFER</name>
          <initializer>= -5</initializer>
          <briefdescription>
<para>Passed object represents invalid buffer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca686bf2cd3e2d24a1b549c6a13ed73393" prot="public">
          <name>VPLM_ERROR_INVALID_IMAGE_DESCRIPTION</name>
          <initializer>= -6</initializer>
          <briefdescription>
<para><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref> which was passed is invalid </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6caf7b2487c638567fe039a4a8bbefa8462" prot="public">
          <name>VPLM_ERROR_INVALID_IMAGE</name>
          <initializer>= -7</initializer>
          <briefdescription>
<para>Passed object represents invalid image. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca45c540c704eeade1a73dfde6fd31cfe7" prot="public">
          <name>VPLM_ERROR_ALLOCATION_FAILED</name>
          <initializer>= -8</initializer>
          <briefdescription>
<para>Memory allocation failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6caa4187a5161f6da7395aee58a238dfc4a" prot="public">
          <name>VPLM_ERROR_NO_PROPERTY</name>
          <initializer>= -9</initializer>
          <briefdescription>
<para>Memory object does not have the requested property. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca673f1866ca5c9a41406ac5eac05b0df7" prot="public">
          <name>VPLM_ERROR_UNSUPPORTED_DEVICE</name>
          <initializer>= -10</initializer>
          <briefdescription>
<para>Operation is not supported for the specified device. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca2192d7fd3e0f2706155dbe74c5b30b7d" prot="public">
          <name>VPLM_ERROR_UNSUPPORTED_REPRESENTATION</name>
          <initializer>= -11</initializer>
          <briefdescription>
<para>Image representation returned by framework is not supported. </para>
          </briefdescription>
          <detaileddescription>
<para>Framework (VAAPI or OPENCL, etc. driver) returned object representation which is not supported by vpl memory library. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6ca3421f0d5c61f5a445c4a78c3fad0d8e4" prot="public">
          <name>VPLM_ERROR_OPERATION_FAILED</name>
          <initializer>= -12</initializer>
          <briefdescription>
<para>Some system operation failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6caea398738651b8d376b53f55db85b6bbe" prot="public">
          <name>VPLM_ERROR_VAAPI_OPERATION_FAILED</name>
          <initializer>= -13</initializer>
          <briefdescription>
<para>Some VAAPI issued call failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1aa0ce86a09386dc5f907735027bcaec6caa136d91ab735700e275271762f2414af" prot="public">
          <name>VPLM_ERROR_OPENCL_OPERATION_FAILED</name>
          <initializer>= -14</initializer>
          <briefdescription>
<para>Some OpenCL issued call failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VPL Memory success status and error codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="52" column="18" bodyfile="include/vplmemory/vplm.h" bodystart="52" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65becee" prot="public" static="no" strong="no">
        <type></type>
        <name>vplm_variantype</name>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceeada059c188376e4b1d4cddb877c3733c2" prot="public">
          <name>VPLM_VARIANT_TYPE_INT32</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit signed integer </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceead9ee6df2b37dabc52c8252e0da3904cb" prot="public">
          <name>VPLM_VARIANT_TYPE_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit signed integer </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceea0d2babab5c7ed08dfa05610d13550f3a" prot="public">
          <name>VPLM_VARIANT_TYPE_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>double </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceea6b055c2c2db1f8ac01c8a4d19355bea9" prot="public">
          <name>VPLM_VARIANT_TYPE_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="structvplm__size" kindref="compound">vplm_size</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceea089a8eec36191b51bbfd446eebdacf05" prot="public">
          <name>VPLM_VARIANT_TYPE_RECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="structvplm__rect" kindref="compound">vplm_rect</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1a7f04f35d7249243ad9f55c8fb65beceeae96ea401dcad2282bbb968c825345a49" prot="public">
          <name>VPLM_VARIANT_TYPE_POINTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generic pointer type </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="120" column="14" bodyfile="include/vplmemory/vplm.h" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="enum" id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66" prot="public" static="no" strong="no">
        <type></type>
        <name>vplm_pixel_format</name>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a459fd598c9cb67703126404e188fb181" prot="public">
          <name>VPLM_PIXEL_FORMAT_NV12</name>
          <initializer>= 0x3231564E</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit 4:2:0 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a65fa4a8ca2cd9acd30fc75c4fe9cb839" prot="public">
          <name>VPLM_PIXEL_FORMAT_YV12</name>
          <initializer>= 0x32315659</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a7c3b32ddad33f79a31dbbbc5980d590f" prot="public">
          <name>VPLM_PIXEL_FORMAT_I420</name>
          <initializer>= 0x30323449</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66ac5c65f024c33cbc399d9a86de48c50de" prot="public">
          <name>VPLM_PIXEL_FORMAT_P010</name>
          <initializer>= 0x30313050</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10-bit YUV 4:2:0 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66ae1c93bfb8a1c4d71be15dd7ab563acea" prot="public">
          <name>VPLM_PIXEL_FORMAT_YUY2</name>
          <initializer>= 0x32595559</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit YUV 4:2:2 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a6f70017dd259027bf98808c76af6e325" prot="public">
          <name>VPLM_PIXEL_FORMAT_UYVY</name>
          <initializer>= 0x59565955</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a0573cc962359cbf36ad7cff984cd781d" prot="public">
          <name>VPLM_PIXEL_FORMAT_Y210</name>
          <initializer>= 0x30313259</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10-bit YUV 4:2:2 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66ade017f812a990733c69b676eba438d96" prot="public">
          <name>VPLM_PIXEL_FORMAT_AYUV</name>
          <initializer>= 0x56555941</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit YUVA 4:4:4 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66af80918dae76b95bda4ba50cee4359dc3" prot="public">
          <name>VPLM_PIXEL_FORMAT_Y410</name>
          <initializer>= 0x30313459</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10-bit YUVA 4:4:4 color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a7035ca06b83705af510f35816e76f7a0" prot="public">
          <name>VPLM_PIXEL_FORMAT_RGBP</name>
          <initializer>= 0x50424752</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit RGB </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a023dbf49f65cdd4ce0b88a739f52db68" prot="public">
          <name>VPLM_PIXEL_FORMAT_ARGB</name>
          <initializer>= 0x42475241</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit RGBA color formats </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a93ac886cefb7e9beb4be5c040131ffd6" prot="public">
          <name>VPLM_PIXEL_FORMAT_ABGR</name>
          <initializer>= 0x52474241</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ab2aae917e0958fe715cfe96a55b8ab66a398ada532acfb30754e51ff82a932d99" prot="public">
          <name>VPLM_PIXEL_FORMAT_RGBA</name>
          <initializer>= 0x41424752</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="144" column="14" bodyfile="include/vplmemory/vplm.h" bodystart="144" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="vplm_8h_1ac746a607c123dcc13430537a5a4af650" prot="public" static="no" strong="no">
        <type></type>
        <name>vplm_data_type</name>
        <enumvalue id="vplm_8h_1ac746a607c123dcc13430537a5a4af650a615b2de4358e0fccb141cf662b3ba8f4" prot="public">
          <name>VPLM_DATA_TYPE_U8</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer contains uint8_t data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ac746a607c123dcc13430537a5a4af650a46ac474c23248a21552cb9d12c078f60" prot="public">
          <name>VPLM_DATA_TYPE_VAAPI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer contains some custom VAAPI data. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="175" column="14" bodyfile="include/vplmemory/vplm.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="enum" id="vplm_8h_1ae180345dd7ec6118fe0b1e157da823c2" prot="public" static="no" strong="no">
        <type></type>
        <name>vplm_access_flags</name>
        <enumvalue id="vplm_8h_1ae180345dd7ec6118fe0b1e157da823c2abe1468cdf3a38944b1217821889467e8" prot="public">
          <name>VPLM_ACCESS_MODE_READ</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
<para>Read access to the memory. </para>
          </briefdescription>
          <detaileddescription>
<para>Object is being access for reading which allows independent parallel read access, but does not allow parallel write access. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ae180345dd7ec6118fe0b1e157da823c2aee0dd74a2d167df9d97ba6693c352aeb" prot="public">
          <name>VPLM_ACCESS_MODE_WRITE</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
<para>Write access to the memory. </para>
          </briefdescription>
          <detaileddescription>
<para>Object is being access for writing which implies unique single access. Any parallel access, being that read or write, is not allowed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vplm_8h_1ae180345dd7ec6118fe0b1e157da823c2aa372176c945400589e4ad3e4c21dc50d" prot="public">
          <name>VPLM_ACCESS_MODE_READWRITE</name>
          <initializer>= VPLM_ACCESS_MODE_READ | VPLM_ACCESS_MODE_WRITE</initializer>
          <briefdescription>
<para>Read and write access to the memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Access modes to acquire access to images or buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="277" column="14" bodyfile="include/vplmemory/vplm.h" bodystart="277" bodyend="292"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vplm_8h_1a2d91c2b4204c507940a53d501774ac35" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t vplm_status</definition>
        <argsstring></argsstring>
        <name>vplm_status</name>
        <briefdescription>
<para>VPL Memory success status and error codes. See _vplm_status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="46" column="17" bodyfile="include/vplmemory/vplm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a878d0372f17237f152a1cd4d25884055" prot="public" static="no">
        <type>struct <ref refid="struct__vplm__vtable" kindref="compound">_vplm_vtable</ref></type>
        <definition>typedef struct _vplm_vtable vplm_mem</definition>
        <argsstring></argsstring>
        <name>vplm_mem</name>
        <briefdescription>
<para>Major VPL Memory object handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="46" column="17" bodyfile="include/vplmemory/vplm.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1ab17bc174978bb2303146b338757e1529" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* vplm_on_destroy_cb) (const vplm_mem *mem)</definition>
        <argsstring>)(const vplm_mem *mem)</argsstring>
        <name>vplm_on_destroy_cb</name>
        <briefdescription>
<para>On destroy callback function prototype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="306" column="9" bodyfile="include/vplmemory/vplm.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a498c878f3c7ce224021181936840cd47" prot="public" static="no">
        <type>struct <ref refid="struct__vplm__va__vtable" kindref="compound">_vplm_va_vtable</ref></type>
        <definition>typedef struct _vplm_va_vtable vplm_va_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_va_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="331" column="22" bodyfile="include/vplmemory/vplm.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a6d75a9cac6c9846ac2f4ea74e5981db6" prot="public" static="no">
        <type>struct <ref refid="struct__vplm__cl__vtable" kindref="compound">_vplm_cl_vtable</ref></type>
        <definition>typedef struct _vplm_cl_vtable vplm_cl_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_cl_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="331" column="22" bodyfile="include/vplmemory/vplm.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a8a7bf627f432739bc3f21eb4303ac1d2" prot="public" static="no">
        <type>struct _vplm_dx11_vtable</type>
        <definition>typedef struct _vplm_dx11_vtable vplm_dx11_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_dx11_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="331" column="22" bodyfile="include/vplmemory/vplm.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a9e00f9ebb371d4ec5852e9269781e6e6" prot="public" static="no">
        <type>struct _vplm_dmabuf_vtable</type>
        <definition>typedef struct _vplm_dmabuf_vtable vplm_dmabuf_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_dmabuf_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="331" column="22" bodyfile="include/vplmemory/vplm.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vplm_8h_1a794db584d9701e58902e3a4307a138a8" prot="public" static="no">
        <type>struct <ref refid="struct__vplm__vtable" kindref="compound">_vplm_vtable</ref></type>
        <definition>typedef struct _vplm_vtable vplm_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_vtable</name>
        <briefdescription>
<para>VPL Memory object, aka vplm_mem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="362" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vplm_8h_1abb02e49a0e7773befdcd3067f59d4ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_cpu_buffer</definition>
        <argsstring>(const vplm_buffer_info *info, vplm_mem **memory)</argsstring>
        <name>vplm_create_cpu_buffer</name>
        <param>
          <type>const <ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Allocates buffer in system memory and returns vpl memory handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="317" column="22" declfile="include/vplmemory/vplm.h" declline="317" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a589213878ff35ba5b70992e81af22b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_cpu_image</definition>
        <argsstring>(const vplm_image_info *info, vplm_mem **memory)</argsstring>
        <name>vplm_create_cpu_image</name>
        <param>
          <type>const <ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Allocates image in system memory and returns vpl memory handle. </para>
        </briefdescription>
        <detaileddescription>
<para>Memory will be allocated according to provided info description. If <ref refid="structvplm__image__info_1a723bc779ad627ded7f01d570606025a7" kindref="member">vplm_image_info.aligned_width</ref> and/or info-&gt;aligned_height are equal to 0, library will select alignment for <ref refid="structvplm__image__info_1a187369fce6615bc8ecf2b7c36c581b73" kindref="member">vplm_image_info.width</ref> and/or <ref refid="structvplm__image__info_1a3a66738580fa1475bd747c518194f680" kindref="member">vplm_image_info.height</ref> on its own. If these values are not zero they will be respected. However, library may still additionally align them to the higher values. If application needs to strictly specify image padding, then it should allocate image on its own and pass it to vplm_create_from_cpu_image. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="328" column="22" declfile="include/vplmemory/vplm.h" declline="328" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a5cb7aa9a7bb4f56d439de59dd5e26dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_from_cpu_buffer</definition>
        <argsstring>(const vplm_cpu_buffer *buffer, vplm_mem **memory)</argsstring>
        <name>vplm_create_from_cpu_buffer</name>
        <param>
          <type>const <ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="330" column="22" declfile="include/vplmemory/vplm.h" declline="330" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a5ff10720392b908fe5939273b49f48e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_from_cpu_image</definition>
        <argsstring>(const vplm_cpu_image *image, vplm_mem **memory)</argsstring>
        <name>vplm_create_from_cpu_image</name>
        <param>
          <type>const <ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="331" column="22" declfile="include/vplmemory/vplm.h" declline="331" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1abdae175a7cf7b1eb118228031675e907" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t vplm_ref</definition>
        <argsstring>(const vplm_mem *memory)</argsstring>
        <name>vplm_ref</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Increases referece counter of the memory object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function call effectively marks one more user of the object making sure object won&apos;t be deleted while this user won&apos;t decrease refence counter by vplm_unref. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="372" column="24" bodyfile="include/vplmemory/vplm.h" bodystart="372" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a52ff65a788afabe71aa93e28608f5066" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t vplm_unref</definition>
        <argsstring>(const vplm_mem *memory)</argsstring>
        <name>vplm_unref</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Decreases reference counter of the memory object. </para>
        </briefdescription>
        <detaileddescription>
<para>Once reference counter will reach 0 object will be destroyed. However, user might install VPLM_PROPERTY_CALLBACK_ON_DESTROY to intersect object release procedure and effectively &quot;save&quot; the object and reuse it via some objects pool. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="386" column="24" bodyfile="include/vplmemory/vplm.h" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a056cffaa355b61ad3de7cf1a5640a52e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_set_property</definition>
        <argsstring>(const vplm_mem *memory, int32_t key, vplm_variant value)</argsstring>
        <name>vplm_set_property</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets object property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="394" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="394" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1ac67f8dddf67ebeec8f0b285a8ba71cd4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_get_property</definition>
        <argsstring>(const vplm_mem *memory, int32_t key, vplm_variant *value)</argsstring>
        <name>vplm_get_property</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns object property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="402" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="402" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a514509372c34c2332904f8d6503e2d20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_clear_properties</definition>
        <argsstring>(const vplm_mem *memory)</argsstring>
        <name>vplm_clear_properties</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Removes all properties from the object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="410" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="410" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1afe050e1c2baf1940345018ba03c0a9ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_get_buffer_info</definition>
        <argsstring>(const vplm_mem *memory, vplm_buffer_info *info)</argsstring>
        <name>vplm_get_buffer_info</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Returns generic object info in a buffer representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="418" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="418" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a5dcba64a633c92e6257bd424b14f94f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_get_image_info</definition>
        <argsstring>(const vplm_mem *memory, vplm_image_info *info)</argsstring>
        <name>vplm_get_image_info</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Returns generic object info in an image representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="426" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="426" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a50c3f47c61a8d17ae2b3d4c9c6daf59a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_map_buffer</definition>
        <argsstring>(const vplm_mem *memory, uint64_t flags, vplm_cpu_buffer *buffer)</argsstring>
        <name>vplm_map_buffer</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Maps object to be accessed on CPU (HOST) as a buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="435" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="435" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a2499ef3aa63b69af7b4965a07614e123" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_unmap_buffer</definition>
        <argsstring>(vplm_cpu_buffer *buffer)</argsstring>
        <name>vplm_unmap_buffer</name>
        <param>
          <type><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Unmaps object from the CPU (HOST). </para>
        </briefdescription>
        <detaileddescription>
<para>On the exit of this function object representation previously returned in <ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref> becomes invalid and should not be accessed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="447" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1aeafb5a80927afe025741d4a4c96b97c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_map_image</definition>
        <argsstring>(const vplm_mem *memory, uint64_t flags, vplm_cpu_image *image)</argsstring>
        <name>vplm_map_image</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref> *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Maps object to be accessed on CPU (HOST) as an image. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="455" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="455" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="vplm_8h_1a3ac5319eb7d660676d799c2049356e7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_unmap_image</definition>
        <argsstring>(vplm_cpu_image *image)</argsstring>
        <name>vplm_unmap_image</name>
        <param>
          <type><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref> *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Unmaps object from the CPU (HOST). </para>
        </briefdescription>
        <detaileddescription>
<para>On the exit of this function object representation previously returned in <ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref> becomes invalid and should not be accessed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm.h" line="467" column="27" bodyfile="include/vplmemory/vplm.h" bodystart="467" bodyend="472"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__VPLM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__VPLM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VPLM_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VPLM_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VPLM_API<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VPLM_API<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VPLM_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/>vplm_status;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__vplm__vtable" kindref="compound">_vplm_vtable</ref><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_vplm_status<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_UNSUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_PARAMETER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_BUFFER_DESCRIPTION<sp/><sp/><sp/><sp/><sp/>=<sp/>-4,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_BUFFER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-5,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_IMAGE_DESCRIPTION<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-6,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_INVALID_IMAGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-7,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_ALLOCATION_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-8,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_NO_PROPERTY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-9,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_UNSUPPORTED_DEVICE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-10,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_UNSUPPORTED_REPRESENTATION<sp/><sp/><sp/><sp/><sp/>=<sp/>-11,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_OPERATION_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-12,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_VAAPI_OPERATION_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-13,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ERROR_OPENCL_OPERATION_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-14,</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*vplm_status*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structvplm__size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><ref refid="structvplm__size" kindref="compound">vplm_size</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structvplm__rect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>x;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>y;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<sp/><ref refid="structvplm__rect" kindref="compound">vplm_rect</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_INT32<sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_INT64,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_DOUBLE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_SIZE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_RECT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_VARIANT_TYPE_POINTER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/>vplm_variantype;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structvplm__variant" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132" refid="structvplm__variant_1af91db8c7d572f86d51041158b66976e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_variantype<sp/><sp/><ref refid="structvplm__variant_1af91db8c7d572f86d51041158b66976e3" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/>int32;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/><sp/><sp/><sp/><sp/>int64;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dbl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvplm__size" kindref="compound">vplm_size</ref><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvplm__rect" kindref="compound">vplm_rect</ref><sp/><sp/><sp/><sp/><sp/>rect;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_NV12<sp/>=<sp/>0x3231564E,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_YV12<sp/>=<sp/>0x32315659,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_I420<sp/>=<sp/>0x30323449,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_P010<sp/>=<sp/>0x30313050,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_YUY2<sp/>=<sp/>0x32595559,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_UYVY<sp/>=<sp/>0x59565955,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_Y210<sp/>=<sp/>0x30313259,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_AYUV<sp/>=<sp/>0x56555941,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_Y410<sp/>=<sp/>0x30313459,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_RGBP<sp/>=<sp/>0x50424752,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_ARGB<sp/>=<sp/>0x42475241,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_ABGR<sp/>=<sp/>0x52474241,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_PIXEL_FORMAT_RGBA<sp/>=<sp/>0x41424752,</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/>vplm_pixel_format;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_DATA_TYPE_U8<sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_DATA_TYPE_VAAPI,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal">}<sp/>vplm_data_type;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structvplm__buffer__info" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_data_type<sp/>data_type;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>reserved[32];</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}<sp/><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structvplm__cpu__buffer" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193" refid="structvplm__cpu__buffer_1a0668685bb8e0c94b75e732b352190351" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="structvplm__cpu__buffer_1a0668685bb8e0c94b75e732b352190351" kindref="member">priv</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref><sp/>info;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="structvplm__cpu__buffer_1a6910d2a1b3d4b6efd532c22f8307fba9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/><ref refid="structvplm__cpu__buffer_1a6910d2a1b3d4b6efd532c22f8307fba9" kindref="member">memory</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>data;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}<sp/><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VPLM_IMAGE_MAX_PLANES<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structvplm__image__info" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_pixel_format<sp/>format;</highlight></codeline>
<codeline lineno="210" refid="structvplm__image__info_1a187369fce6615bc8ecf2b7c36c581b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvplm__image__info_1a187369fce6615bc8ecf2b7c36c581b73" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="structvplm__image__info_1a3a66738580fa1475bd747c518194f680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvplm__image__info_1a3a66738580fa1475bd747c518194f680" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="structvplm__image__info_1a723bc779ad627ded7f01d570606025a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvplm__image__info_1a723bc779ad627ded7f01d570606025a7" kindref="member">aligned_width</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structvplm__image__info_1ae8eb2f09e0b0c038b111a72c5f9fd49e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvplm__image__info_1ae8eb2f09e0b0c038b111a72c5f9fd49e" kindref="member">aligned_height</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>reserved[32];</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}<sp/><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="structvplm__cpu__image" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="244" refid="structvplm__cpu__image_1a9c9b037a5eb2c4d84762d41fb012e2fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="structvplm__cpu__image_1a9c9b037a5eb2c4d84762d41fb012e2fe" kindref="member">priv</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structvplm__cpu__image_1af43c26c204002925204db944ee4224fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref><sp/><ref refid="structvplm__cpu__image_1af43c26c204002925204db944ee4224fc" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structvplm__cpu__image_1a0eb8fa45e2e0c81c419496ba51fab20a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/><ref refid="structvplm__cpu__image_1a0eb8fa45e2e0c81c419496ba51fab20a" kindref="member">memory</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="structvplm__cpu__image_1af6174f5b8b9896c8ec34e98412a2849d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="structvplm__cpu__image_1af6174f5b8b9896c8ec34e98412a2849d" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="structvplm__cpu__image_1ab1cc337fac862d56d925f1c49e2bed51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structvplm__cpu__image_1ab1cc337fac862d56d925f1c49e2bed51" kindref="member">buffer_size</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="structvplm__cpu__image_1ac8f6a14b5e6ea454d7df6150fe28b939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structvplm__cpu__image_1ac8f6a14b5e6ea454d7df6150fe28b939" kindref="member">num_planes</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="270" refid="structvplm__cpu__image_1a96fb036ad343e0e3f07f76262ad507d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="structvplm__cpu__image_1a96fb036ad343e0e3f07f76262ad507d7" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="272" refid="structvplm__cpu__image_1a7b2f76202986c2018588bada14daed8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structvplm__cpu__image_1a7b2f76202986c2018588bada14daed8f" kindref="member">stride</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>planes[VPLM_IMAGE_MAX_PLANES];</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}<sp/><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ACCESS_MODE_READ<sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ACCESS_MODE_WRITE<sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>VPLM_ACCESS_MODE_READWRITE<sp/>=<sp/>VPLM_ACCESS_MODE_READ<sp/>|<sp/>VPLM_ACCESS_MODE_WRITE,</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}<sp/>vplm_access_flags;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor">#define<sp/>VPLM_PROPERTY_CALLBACK_ON_DESTROY<sp/>0x1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*vplm_on_destroy_cb)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor">#define<sp/>VPLM_PROPERTY_CUSTOM<sp/><sp/><sp/><sp/><sp/>0x100000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CPU<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_cpu_buffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref>*<sp/>info,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_cpu_image(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref>*<sp/>info,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_from_cpu_buffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>*<sp/>buffer,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_from_cpu_image(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>*<sp/>image,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__vplm__va__vtable" kindref="compound">_vplm_va_vtable</ref><sp/><ref refid="struct__vplm__va__vtable" kindref="compound">vplm_va_vtable</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__vplm__cl__vtable" kindref="compound">_vplm_cl_vtable</ref><sp/><ref refid="struct__vplm__cl__vtable" kindref="compound">vplm_cl_vtable</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_vplm_dx11_vtable<sp/>vplm_dx11_vtable;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_vplm_dmabuf_vtable<sp/>vplm_dmabuf_vtable;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="struct__vplm__vtable" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__vplm__vtable" kindref="compound">_vplm_vtable</ref><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>priv;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>(*ref)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>(*unref)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*set_property)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/>int32_t<sp/>key,<sp/><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref><sp/>value);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*get_property)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/>int32_t<sp/>key,<sp/><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref>*<sp/>value);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*clear_properties)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*get_image_info)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*get_buffer_info)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*map_buffer)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/>uint64_t<sp/>flags,<sp/><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>*<sp/>buffer);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*unmap_buffer)(<ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>*<sp/>buffer);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*map_image)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/>uint64_t<sp/>flags,<sp/><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>*<sp/>image);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*unmap_image)(<ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>*<sp/>image);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__vplm__va__vtable" kindref="compound">vplm_va_vtable</ref>*<sp/>va;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__vplm__cl__vtable" kindref="compound">vplm_cl_vtable</ref>*<sp/>cl;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_dx11_vtable*<sp/>dx11;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_dmabuf_vtable*<sp/>dmabuf;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_vtable</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>vplm_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;ref(memory);</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>vplm_unref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;unref(memory);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_set_property(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>int32_t<sp/>key,<sp/><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref><sp/>value)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;set_property(memory,<sp/>key,<sp/>value);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_get_property(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>int32_t<sp/>key,<sp/><ref refid="structvplm__variant" kindref="compound">vplm_variant</ref>*<sp/>value)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;get_property(memory,<sp/>key,<sp/>value);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_clear_properties(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;clear_properties(memory);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_get_buffer_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/><ref refid="structvplm__buffer__info" kindref="compound">vplm_buffer_info</ref>*<sp/>info)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;get_buffer_info(memory,<sp/>info);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_get_image_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/><ref refid="structvplm__image__info" kindref="compound">vplm_image_info</ref>*<sp/>info)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;get_image_info(memory,<sp/>info);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CPU<sp/>support<sp/>*/</highlight></codeline>
<codeline lineno="435"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_map_buffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>uint64_t<sp/>flags,<sp/><ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>*<sp/>buffer)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;map_buffer(memory,<sp/>flags,<sp/>buffer);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_unmap_buffer(<ref refid="structvplm__cpu__buffer" kindref="compound">vplm_cpu_buffer</ref>*<sp/>buffer)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer<sp/>||<sp/>!buffer-&gt;<ref refid="structvplm__cpu__buffer_1a6910d2a1b3d4b6efd532c22f8307fba9" kindref="member">memory</ref>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer-&gt;<ref refid="structvplm__cpu__buffer_1a6910d2a1b3d4b6efd532c22f8307fba9" kindref="member">memory</ref>-&gt;unmap_buffer(buffer);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_map_image(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>uint64_t<sp/>flags,<sp/><ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>*<sp/>image)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;map_image(memory,<sp/>flags,<sp/>image);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_unmap_image(<ref refid="structvplm__cpu__image" kindref="compound">vplm_cpu_image</ref>*<sp/>image)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!image<sp/>||<sp/>!image-&gt;<ref refid="structvplm__cpu__image_1a0eb8fa45e2e0c81c419496ba51fab20a" kindref="member">memory</ref>)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image-&gt;<ref refid="structvplm__cpu__image_1a0eb8fa45e2e0c81c419496ba51fab20a" kindref="member">memory</ref>-&gt;unmap_image(image);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__VPLM_H__</highlight></codeline>
    </programlisting>
    <location file="include/vplmemory/vplm.h"/>
  </compounddef>
</doxygen>
