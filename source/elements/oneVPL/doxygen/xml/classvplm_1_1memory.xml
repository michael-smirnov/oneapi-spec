<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classvplm_1_1memory" kind="class" language="C++" prot="public">
    <compoundname>vplm::memory</compoundname>
    <basecompoundref refid="classvplm_1_1wrapper" prot="public" virt="non-virtual">vplm::wrapper&lt; const vplm_mem * &gt;</basecompoundref>
    <derivedcompoundref refid="classvplm_1_1cpu_1_1memory" prot="public" virt="non-virtual">vplm::cpu::memory</derivedcompoundref>
    <derivedcompoundref refid="classvplm_1_1opencl_1_1memory" prot="public" virt="non-virtual">vplm::opencl::memory</derivedcompoundref>
    <derivedcompoundref refid="classvplm_1_1vaapi_1_1memory" prot="public" virt="non-virtual">vplm::vaapi::memory</derivedcompoundref>
    <includes refid="vplm_09_09_8h" local="no">vplm++.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvplm_1_1memory_1a51a1cc567ee2f0b4b61fdb547ca1013a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::memory::memory</definition>
        <argsstring>()</argsstring>
        <name>memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="209" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1a39c2d1dd6119cca72e714e0a55540374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::memory::memory</definition>
        <argsstring>(const vplm_mem *mem)</argsstring>
        <name>memory</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="213" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1a4aa1655d01252df2cd5657a94efb4664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::memory::memory</definition>
        <argsstring>(const memory &amp;mem)</argsstring>
        <name>memory</name>
        <param>
          <type>const <ref refid="classvplm_1_1memory" kindref="compound">memory</ref> &amp;</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="219" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1a51bf9d6381db0376b81fa50fee6c5be3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vplm::memory::~memory</definition>
        <argsstring>()</argsstring>
        <name>~memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="226" column="5" bodyfile="include/vplmemory/vplm++.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1af2989a4bd0570a12dd199b9ea4e3c3cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvplm_1_1memory" kindref="compound">memory</ref> &amp;</type>
        <definition>memory&amp; vplm::memory::operator=</definition>
        <argsstring>(const memory &amp;mem)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvplm_1_1memory" kindref="compound">memory</ref> &amp;</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="231" column="12" bodyfile="include/vplmemory/vplm++.h" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1a28734d8c51231cdddec604e00a7cd0ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>vplm_status vplm::memory::setProperty</definition>
        <argsstring>(int32_t key, vplm::variant value)</argsstring>
        <name>setProperty</name>
        <param>
          <type>int32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classvplm_1_1variant" kindref="compound">vplm::variant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="239" column="24" bodyfile="include/vplmemory/vplm++.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1af8af48198a2c82c8ec466b67abef48e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvplm_1_1variant" kindref="compound">vplm::variant</ref></type>
        <definition>vplm::variant vplm::memory::getProperty</definition>
        <argsstring>(int32_t key)</argsstring>
        <name>getProperty</name>
        <param>
          <type>int32_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="244" column="26" bodyfile="include/vplmemory/vplm++.h" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1acb08cd96221e79b87bb01d80baf1178f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>vplm_status vplm::memory::clearProperties</definition>
        <argsstring>()</argsstring>
        <name>clearProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="253" column="24" bodyfile="include/vplmemory/vplm++.h" bodystart="253" bodyend="256"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvplm_1_1memory_1adaaaeb902992c533a2d36d05166d064f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vplm::memory::ref</definition>
        <argsstring>()</argsstring>
        <name>ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="259" column="17" bodyfile="include/vplmemory/vplm++.h" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classvplm_1_1memory_1acbb66b03175265a08dbcd0c4f5e974b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vplm::memory::unref</definition>
        <argsstring>()</argsstring>
        <name>unref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm++.h" line="265" column="17" bodyfile="include/vplmemory/vplm++.h" bodystart="265" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base C++ VPL Memory object. </para>
    </briefdescription>
    <detaileddescription>
<para>This class wraps C memory handle and provides access to generic VPL Memory API calls independent from the HW frameworks like getting/setting properties.</para>
<para>To access underlying memory object within some framework (like Opencl or VAAPI), VPL Memory C++ API defines framework specific memory handlers inherited from this base class. The key thing to note is that end user can construct framework handler from the base memory object. For example: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;vplmemory/vplm++.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;vplmemory/vplm_vaapi++.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vplm::memory<sp/>mem<sp/>=<sp/>get_from_somewhere();</highlight></codeline>
<codeline><highlight class="normal">vplm::vaapi::memory<sp/>va_mem(mem);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">printf(&quot;&gt;&gt;&gt;<sp/>VASurfaceID=%d\n&quot;,<sp/>va_mem.getSurfaceId());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>vplm::vaapi::memory</label>
        <link refid="classvplm_1_1vaapi_1_1memory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vplm::wrapper&lt; const vplm_mem * &gt;</label>
        <link refid="classvplm_1_1wrapper"/>
      </node>
      <node id="4">
        <label>vplm::opencl::memory</label>
        <link refid="classvplm_1_1opencl_1_1memory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vplm::cpu::memory</label>
        <link refid="classvplm_1_1cpu_1_1memory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>vplm::memory</label>
        <link refid="classvplm_1_1memory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>_vplm_vtable</label>
        <link refid="struct__vplm__vtable"/>
        <childnode refid="4" relation="usage">
          <edgelabel>va</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cl</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vplm::wrapper&lt; const vplm_mem * &gt;</label>
        <link refid="classvplm_1_1wrapper"/>
        <childnode refid="3" relation="usage">
          <edgelabel>object_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>_vplm_va_vtable</label>
        <link refid="struct__vplm__va__vtable"/>
      </node>
      <node id="1">
        <label>vplm::memory</label>
        <link refid="classvplm_1_1memory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>_vplm_cl_vtable</label>
        <link refid="struct__vplm__cl__vtable"/>
      </node>
    </collaborationgraph>
    <location file="include/vplmemory/vplm++.h" line="207" column="1" bodyfile="include/vplmemory/vplm++.h" bodystart="206" bodyend="271"/>
    <listofallmembers>
      <member refid="classvplm_1_1memory_1acb08cd96221e79b87bb01d80baf1178f" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>clearProperties</name></member>
      <member refid="classvplm_1_1memory_1af8af48198a2c82c8ec466b67abef48e5" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>getProperty</name></member>
      <member refid="classvplm_1_1memory_1a51a1cc567ee2f0b4b61fdb547ca1013a" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>memory</name></member>
      <member refid="classvplm_1_1memory_1a39c2d1dd6119cca72e714e0a55540374" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>memory</name></member>
      <member refid="classvplm_1_1memory_1a4aa1655d01252df2cd5657a94efb4664" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>memory</name></member>
      <member refid="classvplm_1_1wrapper_1a798603677edb68f06e196db09281a68f" prot="protected" virt="non-virtual"><scope>vplm::memory</scope><name>object_</name></member>
      <member refid="classvplm_1_1wrapper_1ada0f50315cdc634c0114894f0eec844b" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a7da3f4d86ddf6351e22724e7b12d31d6" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>operator&amp;</name></member>
      <member refid="classvplm_1_1wrapper_1a2da9a1c3ac7046862b28e00f1f37653a" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>operator()</name></member>
      <member refid="classvplm_1_1wrapper_1a6603d37b01bf19621f49803136f575fd" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>operator()</name></member>
      <member refid="classvplm_1_1memory_1af2989a4bd0570a12dd199b9ea4e3c3cb" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>operator=</name></member>
      <member refid="classvplm_1_1wrapper_1ae9a073fb0ba546a1c00dddd84c46d48b" prot="public" virt="non-virtual" ambiguityscope="wrapper&lt; const vplm_mem * &gt;::"><scope>vplm::memory</scope><name>operator=</name></member>
      <member refid="classvplm_1_1memory_1adaaaeb902992c533a2d36d05166d064f" prot="protected" virt="non-virtual"><scope>vplm::memory</scope><name>ref</name></member>
      <member refid="classvplm_1_1memory_1a28734d8c51231cdddec604e00a7cd0ed" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>setProperty</name></member>
      <member refid="classvplm_1_1memory_1acbb66b03175265a08dbcd0c4f5e974b1" prot="protected" virt="non-virtual"><scope>vplm::memory</scope><name>unref</name></member>
      <member refid="classvplm_1_1wrapper_1a8ad143ad41c6f7c49ac60d61f67a39a5" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>wrapper</name></member>
      <member refid="classvplm_1_1wrapper_1a3de834fb4d08f1c99f7653b38e70eb63" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>wrapper</name></member>
      <member refid="classvplm_1_1memory_1a51bf9d6381db0376b81fa50fee6c5be3" prot="public" virt="non-virtual"><scope>vplm::memory</scope><name>~memory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
