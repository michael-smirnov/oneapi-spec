<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vplm__vaapi_8h" kind="file" language="C++">
    <compoundname>vplm_vaapi.h</compoundname>
    <includes refid="vplm_8h" local="no">vplmemory/vplm.h</includes>
    <includes local="no">va/va.h</includes>
    <includedby refid="vplm__vaapi_09_09_8h" local="no">include/vplmemory/vplm_vaapi++.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>va/va.h</label>
      </node>
      <node id="4">
        <label>uchar.h</label>
      </node>
      <node id="1">
        <label>include/vplmemory/vplm_vaapi.h</label>
        <link refid="vplm__vaapi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vplmemory/vplm.h</label>
        <link refid="vplm_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/vplmemory/vplm_vaapi.h</label>
        <link refid="vplm__vaapi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/vplmemory/vplm_vaapi++.h</label>
        <link refid="vplm__vaapi_09_09_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct__vplm__va__vtable" prot="public">_vplm_va_vtable</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vplm__vaapi_8h_1a498c878f3c7ce224021181936840cd47" prot="public" static="no">
        <type>struct <ref refid="struct__vplm__va__vtable" kindref="compound">_vplm_va_vtable</ref></type>
        <definition>typedef struct _vplm_va_vtable vplm_va_vtable</definition>
        <argsstring></argsstring>
        <name>vplm_va_vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="54" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vplm__vaapi_8h_1a81afa2386111ea14cb57f3aa583e6748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_from_va_surface</definition>
        <argsstring>(VADisplay dpy, VASurfaceID id, vplm_mem **memory)</argsstring>
        <name>vplm_create_from_va_surface</name>
        <param>
          <type>VADisplay</type>
          <declname>dpy</declname>
        </param>
        <param>
          <type>VASurfaceID</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Wraps given VAAPI surface into VPL Memory object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dpy</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VA display which was used to create the surface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VA surface id created on the specified VA display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vpl memory handle wrapping VA surface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="39" column="22" declfile="include/vplmemory/vplm_vaapi.h" declline="39" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm__vaapi_8h_1a5fb84a55e2e889105af263a291aefb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPLM_API vplm_status</type>
        <definition>VPLM_API vplm_status vplm_create_from_va_buffer</definition>
        <argsstring>(VADisplay dpy, VABufferID id, vplm_mem **memory)</argsstring>
        <name>vplm_create_from_va_buffer</name>
        <param>
          <type>VADisplay</type>
          <declname>dpy</declname>
        </param>
        <param>
          <type>VABufferID</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> **</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Wraps given VAAPI buffer into VPL Memory object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dpy</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VA display which was used to create the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VA buffer id created on the specified VA display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vpl memory handle wrapping VA buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="47" column="22" declfile="include/vplmemory/vplm_vaapi.h" declline="47" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="vplm__vaapi_8h_1a4732ac831c4c3a39c81ab92178b02e79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t vplm_va_query_displays</definition>
        <argsstring>(const vplm_mem *memory, VADisplay *displays, size_t num_displays)</argsstring>
        <name>vplm_va_query_displays</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>VADisplay *</type>
          <declname>displays</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_displays</declname>
        </param>
        <briefdescription>
<para>Returns OpenCL memory object representation as an image. </para>
        </briefdescription>
        <detaileddescription>
<para>If memory object does not have OpenCL representation yet, it will be generated or an error returned if that&apos;s not possible for some reason. Under the hood VPL Memory library uses one of OpenCL memory sharing APIs unless memory object wasn&apos;t initially created as an OpenCL object. vplm_cl_begin_image_access and vplm_cl_end_image_access functions should further be used to mark access period to the OpenCL object in the OpenCL queue(s). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="65" column="22" bodyfile="include/vplmemory/vplm_vaapi.h" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="vplm__vaapi_8h_1a5a1d658ff92047017224de1350d49001" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_va_get_surface</definition>
        <argsstring>(const vplm_mem *memory, VADisplay dpy, VASurfaceID *image)</argsstring>
        <name>vplm_va_get_surface</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>VADisplay</type>
          <declname>dpy</declname>
        </param>
        <param>
          <type>VASurfaceID *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Returns memory object representation as VA surface. </para>
        </briefdescription>
        <detaileddescription>
<para>If memory object does not have VA representation yet, it will be generated or an error returned if that&apos;s not possible for some reason. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="77" column="27" bodyfile="include/vplmemory/vplm_vaapi.h" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="vplm__vaapi_8h_1a13e6bc5e6909edc726e15b57dce20b86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vplm_status</type>
        <definition>static vplm_status vplm_va_get_buffer</definition>
        <argsstring>(const vplm_mem *memory, VADisplay dpy, VABufferID *buffer)</argsstring>
        <name>vplm_va_get_buffer</name>
        <param>
          <type>const <ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>VADisplay</type>
          <declname>dpy</declname>
        </param>
        <param>
          <type>VABufferID *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Returns memory object representation as VA buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If memory object does not have VA representation yet, it will be generated or an error returned if that&apos;s not possible for some reason. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vplmemory/vplm_vaapi.h" line="89" column="27" bodyfile="include/vplmemory/vplm_vaapi.h" bodystart="89" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__VPLM_VAAPI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__VPLM_VAAPI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vplmemory/vplm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;va/va.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_from_va_surface(VADisplay<sp/>dpy,<sp/>VASurfaceID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">VPLM_API<sp/>vplm_status<sp/>vplm_create_from_va_buffer(VADisplay<sp/>dpy,<sp/>VABufferID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>**<sp/>memory);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="struct__vplm__va__vtable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__vplm__va__vtable" kindref="compound">_vplm_va_vtable</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>(*query_displays)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>mem,<sp/>VADisplay*<sp/>displays,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_displays);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*get_surface)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>VADisplay<sp/>dpy,<sp/>VASurfaceID*<sp/>image);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>vplm_status<sp/>(*get_buffer)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>VADisplay<sp/>dpy,<sp/>VABufferID*<sp/>buffer);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><ref refid="struct__vplm__va__vtable" kindref="compound">vplm_va_vtable</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vplm_va_query_displays(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>VADisplay*<sp/>displays,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_displays)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory<sp/>||<sp/>!memory-&gt;va)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;va-&gt;query_displays(memory,<sp/>displays,<sp/>num_displays);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_va_get_surface(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>VADisplay<sp/>dpy,<sp/>VASurfaceID*<sp/>image)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory<sp/>||<sp/>!memory-&gt;va)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;va-&gt;get_surface(memory,<sp/>dpy,<sp/>image);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vplm_status<sp/>vplm_va_get_buffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__vplm__vtable" kindref="compound">vplm_mem</ref>*<sp/>memory,<sp/>VADisplay<sp/>dpy,<sp/>VABufferID*<sp/>buffer)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memory<sp/>||<sp/>!memory-&gt;va)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VPLM_ERROR_INVALID_MEMORY_OBJECT;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory-&gt;va-&gt;get_buffer(memory,<sp/>dpy,<sp/>buffer);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__VPLM_VAAPI_H__</highlight></codeline>
    </programlisting>
    <location file="include/vplmemory/vplm_vaapi.h"/>
  </compounddef>
</doxygen>
